<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: api | Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/blog/categories/api/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2014-10-24T09:50:45+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[RailsでAPIを作るときのエラー処理について]]></title>
    <link href="http://blog.yucchiy.com/2014/08/31/error-rails-api/"/>
    <updated>2014-08-31T20:20:27+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/31/error-rails-api</id>
    <content type="html"><![CDATA[<p><a href="http://blog.yucchiy.com/2014/08/20/delivery-api-with-rails/">RailsでAPIを雑に書いていたんだけど</a>, コントローラとかをどう書くとエラー処理しやすくなっていいかなーと考えていて, 個人的に考えがまとまったのでブログ書いた.</p>

<p>※9/1に追記書いた.</p>

<h2>良いエラー処理について</h2>

<p>個人的にAPIを書く上で(API書くに限らない気はするけど)どういうふうにエラー処理を行うと良いかなーと考えてみると</p>

<ul>
<li>コントローラ内では基本的に, <strong>ある関数の処理が失敗して, 次の処理が行えない場合はすべて例外を投げる</strong></li>
<li>例外は各々のコントローラ内で例外のキャッチは行わず, すべてApplicationControllerなど, <strong>親コントローラ内の1メソッドで完結させる</strong></li>
</ul>

<p>かなーと思う. APIのエラー処理は, <a href="http://instagram.com/developer/endpoints/">Envelopeにステータスコードとエラーメッセージを書いて</a>, APIのフォーマットを統一するほうがクライアントが作りやすそうだし, またこのように処理することで, <strong>エラー処理での条件分岐の必要がなくなり</strong>, コントローラの可読性の向上にもつながる. </p>

<h2>Grape vs Rails</h2>

<p>APIつくるんだったら, <a href="https://www.google.co.jp/search?q=rails+api&amp;oq=rails+api+&amp;aqs=chrome..69i57j69i60l3j69i59j69i61.9488j0j1&amp;sourceid=chrome&amp;es_sm=119&amp;ie=UTF-8">Grapeサイコー</a>という意見が多い.</p>

<p>確かにGrapeのDSLは直感的に書けるし, バリデーションなど便利メソッドが多いけど, 個人的には素のRailsでAPIを書くほうがセンスが良いと感じる. というのもRackベースなので, ルーティングなど独自のものが多く, せっかくRailsが提供してるRakeのタスクや, ジェネレータがそのまま使えないからである.</p>

<p>SinatraとかでAPI納品するんだったら, Grapeとかいれるのはすごい良さそう.</p>

<p>ただ, そのままのRailsではJSONやXMLをいい感じの構造で返す仕組みが貧弱なので, <a href="https://github.com/nesquena/rabl">RABL</a>を導入するのが便利. これはJSONやXMLをいい感じに生成するためのテンプレートエンジンで, DSLを用いて直感的にAPI出力を定義できる.</p>

<p>また, <a href="https://github.com/nesquena/rabl/wiki/Using-Layouts">RailsのLayoutsにも対応しており</a>, <code>views/layouts/application.rabl</code>とかを定義しておくことで, <a href="http://instagram.com/developer/endpoints/">Envelope</a>みたいなのを簡単に実現できる.</p>

<h2>コントローラ内でのエラー処理</h2>

<p>上記に上げたとおり, コントローラ内でモデルのCRUDなどの<strong>処理が失敗した場合</strong>は例外を投げてApplicationControllerに処理を渡す.</p>

<p>例えば<code>show</code>メソッドでは以下のように処理する.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">show</span>
  <span class="vi">@piyo</span> <span class="o">=</span> <span class="no">Piyo</span><span class="o">.</span><span class="n">find_by!</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<h2>ApplicationControllerでのエラー処理</h2>

<p>以下のようなConcernを定義し, ApplicationControllerから読み込むことでエラー処理を行う.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Api::ErrorHandlers</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="kp">attr_accessor</span> <span class="ss">:status</span><span class="p">,</span> <span class="ss">:message</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_filter</span> <span class="ss">:setup</span>
    <span class="n">rescue_from</span> <span class="no">StandardError</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="ss">:rescue_exception</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">rescue_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
    <span class="vi">@message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
    <span class="k">if</span> <span class="n">rescuable?</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
      <span class="n">re</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="p">)</span> <span class="p">?</span> <span class="n">e</span> <span class="p">:</span> <span class="no">RESCUABLE_EXCEPTIONS</span><span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
      <span class="vi">@status</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">status</span>
    <span class="k">else</span>
      <span class="vi">@status</span> <span class="o">=</span> <span class="mi">500</span>
      <span class="vi">@message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
    <span class="k">end</span>

    <span class="n">render</span> <span class="s1">&#39;api/errors/base&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">rescuable?</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="p">)</span> <span class="o">||</span> <span class="no">RESCUABLE_EXCEPTIONS</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">setup</span>
    <span class="vi">@status</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="vi">@message</span> <span class="o">=</span> <span class="s2">&quot;OK&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>ポイントはすべての例外処理を<code>rescue_exception</code>で受け取るところである. この<code>rescue_exception</code>は投げられた例外によって, 適切なステータスコードとエラーメッセージをビューに渡すメソッドで, それらはEnvelopeとして出力される. 例えばRablのLayoutsで以下のように定義することでエラー出力する.</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="x">{</span>
<span class="x">  &quot;status&quot;: </span><span class="cp">&lt;%=</span> <span class="vi">@status</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">html_safe</span> <span class="cp">%&gt;</span><span class="x">,</span>
<span class="x">  &quot;message&quot;: </span><span class="cp">&lt;%=</span> <span class="vi">@message</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">html_safe</span> <span class="cp">%&gt;</span><span class="x">,</span>
<span class="x">  &quot;data&quot;: </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">}</span>
</code></pre></div>
<p>ここで, 例外に対応するステータスコードを以下のように引く.</p>

<ol>
<li>独自の例外の場合は, その<strong>例外クラスにステータスを保持させる</strong></li>
<li>組み込みの例外（例えばActiveRecordのNotFoundException）の場合は, 例外に対応する<strong>ステータスコードの対応表から</strong>引く</li>
<li>それ以外の例外の場合は500を返す</li>
</ol>

<p>1の場合は, <code>Api::Exceptions::RescuableException</code>を作成して, それを継承した独自の例外クラスを投げて対応する.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Api::Exceptions</span>
  <span class="k">class</span> <span class="nc">RescuableException</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
    <span class="kp">attr_accessor</span> <span class="ss">:status</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">status</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Error&quot;</span><span class="p">)</span>
      <span class="k">super</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
      <span class="vi">@status</span> <span class="o">=</span> <span class="n">status</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">UnAuthenticationException</span> <span class="o">&lt;</span> <span class="no">RescuableException</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Unauthorized&quot;</span><span class="p">)</span>
      <span class="k">super</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>2の場合は, <code>RESCUEABLE_EXCEPTIONS</code>みたいなハッシュを作って対応する.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">RESCUABLE_EXCEPTIONS</span> <span class="o">=</span> <span class="p">{</span>
  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">=&gt;</span> <span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s2">&quot;Record Not Found&quot;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>
<p>3の場合は, 上に2つの条件を満たさない場合に500を返すように<code>rescue_exception</code>メソッドを書くことで対応する.</p>

<h2>まとめ</h2>

<p>ApplicationControllerで<code>Api::ErrorHandlers</code>を定義し, <code>rescue_exception</code>で例外処理することで, 開発速度が上がって良さそうだという個人的なエラー処理のまとめを書いてみた.</p>

<h2>追記</h2>

<p><a href="https://twitter.com/r7kamura">@r7kamura</a>さんに, 以下のリプライを頂いて</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yucchiy_">@yucchiy_</a> Rack middlewareの中で例外発生したらどうしますか</p>&mdash; いもり手 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/506088448566915072">2014, 8月 31</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yucchiy_">@yucchiy_</a> 例えばありがちな問題として、RailsにContent-Type: application/jsonを指定しながら誤ったJSONを送ると、パース部分はRack middlewareで実装されているので、例外が発生して500が返ります (400とかにしたい)</p>&mdash; いもり手 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/506094476809367552">2014, 8月 31</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>確かに, <strong>Rack middlewareのこととか全く考慮できてなくてダメダメ</strong>って感じだった.</p>

<p>そして起きたら<a href="http://qiita.com/r7kamura/items/2e88adbdd1782277b2e7">RailsでAPIをつくるときのエラー処理</a>っていうすごい知見がまとめられていた.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでAPIを書いたときの雑な感想]]></title>
    <link href="http://blog.yucchiy.com/2014/08/20/delivery-api-with-rails/"/>
    <updated>2014-08-20T15:35:23+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/20/delivery-api-with-rails</id>
    <content type="html"><![CDATA[<p>某インターンのメンターをしながら, メンターたちと空いてる時間を使ってネイティブアプリを書いていた.
その時バックエンドをRailsで書いて思ったことを夏休みの感想文としてまとめてみた.</p>

<h2>ライブラリの選定</h2>

<h3>Grape</h3>

<p>RailsでAPIといえば, <a href="https://github.com/intridea/grape">Grape</a>というライブラリが有名だけど, 特にRailsのデフォルトのコントローラで困ることが少なかったのと, Railsとの記法の違いっぽいところがあって, 導入しなかった.</p>

<p>ただいま考えてみれば, <a href="https://github.com/intridea/grape#parameter-validation-and-coercion">パラメータのバリデーション</a>や, (どう管理するのかしらんけど)<a href="https://github.com/intridea/grape#cookies">Cookie</a>をサポートしていたり, <a href="https://github.com/intridea/grape#exception-handling">エラーハンドリング</a>もいい感じだし, 導入してみたら楽だったかもしれない.</p>

<p>各アクションに<code>desc</code>を書いておけば, ドキュメントの自動生成とかできたりするし. 実はとても便利かもしれない.(反省終わり)</p>

<h3>Rabl</h3>

<p>Grapeのかわりに<a href="https://github.com/nesquena/rabl">Rabl</a>というJSONとかの記述を楽にするDSLを提供するテンプレートエンジンを導入した. 単純にRailsの<code>render :json</code>とかで出力してしまってもいいのだが, コントローラでJSONの構造を構築するのはスマートではないし, InstagramやTwitterのAPIでは, すべてのAPIレスポンスに<a href="http://instagram.com/developer/endpoints/">Envelope</a>と呼ばれる, APIのコールにステータスコードやメッセージをのせるケースが多く, そういうのに対応させようと思うとRablがいいかな, と思って導入した.</p>

<p>例えば, ビューで</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1"># app/views/posts/index.rabl</span>
<span class="n">collection</span> <span class="vi">@posts</span>
<span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:subject</span>
<span class="n">child</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="n">attributes</span> <span class="ss">:full_name</span> <span class="p">}</span>
<span class="n">node</span><span class="p">(</span><span class="ss">:read</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="n">post</span><span class="o">.</span><span class="n">read_by?</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="p">}</span>
</code></pre></div>
<p>って書くと</p>
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="p">[{</span>  <span class="s2">&quot;post&quot;</span> <span class="o">:</span>
  <span class="p">{</span>
    <span class="s2">&quot;id&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span> <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span>
    <span class="s2">&quot;user&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;full_name&quot;</span> <span class="o">:</span> <span class="s2">&quot;...&quot;</span> <span class="p">},</span>
    <span class="s2">&quot;read&quot;</span> <span class="o">:</span> <span class="kc">true</span>
  <span class="p">}</span>
<span class="p">}]</span>
</code></pre></div>
<p>って出力される(公式丸パクリ). 便利.</p>

<h2>RailsでAPIを書くときの知見</h2>

<p>Rails+RablでAPI書いてたまった知見を書いていく.</p>

<h3>CSRF対策</h3>

<p>APIリクエストの場合, CSRF対策が特に必要ないので, <code>ApplicationController</code>に以下のように記述することで, CSRFを回避する.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">skip_before_action</span> <span class="ss">:verify_authenticity_token</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:json_request?</span>

<span class="kp">protected</span>

<span class="k">def</span> <span class="nf">json_request?</span>
  <span class="n">request</span><span class="o">.</span><span class="n">format</span><span class="o">.</span><span class="n">json?</span>
<span class="k">end</span>
</code></pre></div>
<h3>Strong Parameters</h3>

<p>RailsのForm+Strong Parametersだと, よく以下のような記述を見る.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">article_params</span>
   <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:headline</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<p>ただAPIのクエリは, <code>{article:{ headline: &quot;hoge&quot;, content: &quot;piyo&quot; }}</code>みたいなネストした感じでクエリ送ることってあんまりないと思う. ということでStrong Parametersを利用するために以下のように書いた.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">article_params</span>
  <span class="no">ActionController</span><span class="o">::</span><span class="no">Parameters</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:headline</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<h3>基底コントローラの活用</h3>

<p>RailsでAPI書いてると, 多分<code>/api</code>以下はデフォルトでJSONで返したいニーズとかあると思う. そういう場合は, <code>ApplicationController</code>を継承した<code>Api::ApplicationController</code>とか定義して<code>/app/controllers/api/application_controller.rb</code>とし, そこに<code>respond_to :json</code>とか, <code>default_format :json</code>とかしておくと何かと便利.</p>

<h2>不満点とか</h2>

<p>不便だと思った点とか上げていく.</p>

<h3>例外の扱い</h3>

<p>Railsのコントローラ内で投げられる例外は, すべてそのステータスコードをもってほしいと思った. またコントローラ内でモデルのCRUDを行って失敗した時は, 直ちに例外を投げるように実装を行うべきだと思った.</p>

<p>明示的にキャッチしなかった例外は, <code>ApplicationController</code>でハンドルし, 例外が持っているメッセージとステータスコードを出力することで, 一貫したエラー処理が行えるし, 各コントローラでは基本例外を投げるので, 分岐が減り, 読みやすいコントローラが書けるのではと思った.</p>

<p>あと, No route errorは例外でキャッチしたい.</p>

<h3>RablのLayoutsがうまく動かない</h3>

<p>最初に書いたEnvelopeの対応は<a href="https://github.com/nesquena/rabl/wiki/Using-Layouts">RablのLayouts</a>を使うと綺麗にかけて良さそうだけど, 以下のサンプルのソースを書いてもうまくいかなかった. 具体的には<code>yield</code>の部分が<code>nil</code>になってしまった.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">node</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span> <span class="p">{</span> <span class="n">response</span><span class="o">.</span><span class="n">status</span> <span class="p">}</span>
<span class="n">node</span><span class="p">(</span><span class="ss">:error</span><span class="p">)</span>  <span class="p">{</span> <span class="vi">@error</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">html_safe</span> <span class="p">}</span>

<span class="n">node</span><span class="p">(</span><span class="ss">:result</span><span class="p">)</span> <span class="k">do</span>
  <span class="k">case</span> <span class="n">content_type</span>
  <span class="k">when</span> <span class="ss">:json</span>
    <span class="no">Yajl</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="k">yield</span><span class="p">)</span>
  <span class="k">when</span> <span class="ss">:xml</span>
    <span class="no">Nori</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="k">yield</span><span class="p">)</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>直し方募集中.</p>

<h2>まとめ</h2>

<p>Railsで雑にAPIを納品した時の感想として, 概ねRailsでいい感じにかけていいけど, 多少不満とかあったのでまとめてみた. たぶんGrape導入したら解決しそうだし皆さんGrape使いましょう(完).</p>
]]></content>
  </entry>
  
</feed>
