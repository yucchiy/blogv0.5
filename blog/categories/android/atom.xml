<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2014-10-15T05:37:08+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[京都 Android 勉強会]]></title>
    <link href="http://blog.yucchiy.com/2014/08/23/kyoto-android-201408/"/>
    <updated>2014-08-23T15:02:20+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/23/kyoto-android-201408</id>
    <content type="html"><![CDATA[<p>京都Android勉強会に参加したときのメモを, 参加記としてブログに公開.</p>

<h2>Androidとアカウント @cockscomb さん</h2>

<p>AccountManagerがひたすら便利だという話.</p>

<h3>AccountManager</h3>

<ul>
<li>Androidのアカウント管理システム</li>
<li>認証トークンの取得を抽象化

<ul>
<li>iOSにないおもしろい機能</li>
</ul></li>
<li>アプリ間での共有</li>
<li>認証トークンを暗黙的に取得

<ul>
<li>無効化されるまでキャッシュ・自動的に取得</li>
</ul></li>
</ul>

<h3>使い方</h3>

<ul>
<li>AndroidManifest.xmlに記述

<ul>
<li>account-authenticator という項目を追加</li>
</ul></li>
<li><code>Service</code>を継承した, <code>AuthenticationService</code>

<ul>
<li>コピペで一瞬で書ける</li>
</ul></li>
<li><code>AbstractAccountAuthenticaticator</code>を継承したクラスを作成

<ul>
<li><code>addAccount</code>, <code>getAuthToken</code>メソッドが重要</li>
</ul></li>
</ul>

<p>サンプルコードは, <a href="https://github.com/android/platform_development/tree/master/samples/SampleSyncAdapter">SampleSyncAdapter</a>にあるのでこれを見たらよい.</p>

<h3>VolleyとAccountManagerの連携</h3>

<ul>
<li>自動的に非同期に呼び出し</li>
<li>認証失敗時にはAuthFailureError</li>
<li>AuthenticatorをMockしてテストが可能</li>
</ul>

<h2>クックパッドの業務の話 @rejasupotaro さん</h2>

<p>一年で本体アプリにコミットする人が急増したので, いかにしてスケールするかみたいな発表.</p>

<h3>開発環境</h3>

<ul>
<li>Android Studio + Gradle</li>
<li>Groovyで自動化

<ul>
<li>リリースエンジニアリングをコマンド一つでやったりできるっぽい</li>
</ul></li>
<li>Android Frontier</li>
</ul>

<h3>イテレーション</h3>

<ul>
<li>二週間に1度リリース. タスクはすべてGithubのissueで管理.

<ul>
<li>だいたい100個くらい消化してる</li>
</ul></li>
</ul>

<h3>レビュー</h3>

<ul>
<li>レビューがボトルネック</li>
<li>レビュータイムを設ける

<ul>
<li>10時に手付かずのPRがチャットに流れる</li>
</ul></li>
<li>レビュー系はBotでいろいろ自動化

<ul>
<li>過去の経験からレビューにチェックリストをつける. 障害系のチェックに便利</li>
</ul></li>
</ul>

<h4>UIテスト</h4>

<ul>
<li>自動化はコストに見合わなくて断念</li>
<li>iOSは<a href="http://appium.io/">Appium</a>でシナリオが100個ある</li>
</ul>

<h4>ドックフーディング</h4>

<ul>
<li>PRをマージして, Jenkinsがテストして, ベータ版をDeployGateでリリース.

<ul>
<li>ただあんまりうまく行ってない</li>
</ul></li>
</ul>

<h3>エラー監視</h3>

<ul>
<li>クラッシュリティクスでクラッシュ数と推移とクラッシュ確認(Crash Free Usersを99.n%以上にする)</li>
</ul>

<h3>リリースしすぎ問題</h3>

<ul>
<li>リリースし過ぎると, 毎回ダウンロードが入って不便.

<ul>
<li>レビューでディスられるっぽい</li>
</ul></li>
<li>LINEとFacebookは一ヶ月サイクル(?)</li>
</ul>

<h2>XML BY DESIGN デザイナがコードを書くとちょっと良いこと @yulily100 さん</h2>

<p>XMLをデザイナが書くといろいろ開発が幸せになる話.</p>

<p><script async="true" class="speakerdeck-embed" data-id="dd195b300fbd0132c8492abbbf00bf60" src="//speakerdeck.com/assets/embed.js"> </script></p>

<h3>UIをつくる</h3>

<ul>
<li>ペーパープロトタイピング

<ul>
<li>プログラマとも相談する. 実装とかの兼ね合い</li>
</ul></li>
<li>ユーザビリティテスト</li>
<li>プログラマと一緒にやって, 前提を共有する</li>
</ul>

<h3>コードを書く</h3>

<ul>
<li>Githubを使って, PRベースで進める

<ul>
<li>細かい相談をコメントで</li>
<li>スクショはれるし便利</li>
</ul></li>
<li>出し分けが必要になった時点で, pushしてエンジニアにやってもらう.</li>
<li>全部終わったらレビューをお願いする. 良かったらマージ.</li>
</ul>

<h3>なにが良いか</h3>

<ul>
<li>動くものを触りながらデザインすることができる

<ul>
<li>動かないとわからないこともある</li>
</ul></li>
<li>カンプを作らなくてもいいから, 無駄な時間を削減</li>
<li>エンジニアとワイワイ出来る</li>
</ul>

<h2>オブジェクト指向やめましょう @kis さん</h2>

<p>オブジェクト指向は, 語られるコンテキストがバラバラで腐ったBuzzWord.</p>

<p>オブジェクト指向を使ったからといって, 良いコードを書けるわけではないのでそんな夢は捨ててちゃんと勉強しましょうという話.</p>

<h2>黒魔術 @_kaiinui さん</h2>

<p>Javaの黒魔術: Annotationについて</p>

<p><script async="true" class="speakerdeck-embed" data-id="45f2eb000cd301321e865e226fb19d76" src="//speakerdeck.com/assets/embed.js"> </script></p>

<h3>良さ</h3>

<ul>
<li>宣言的</li>
<li>コードと宣言を分離できる</li>
<li>ミスを防止できる</li>
</ul>

<h3>作り方</h3>

<p>AspectJを使うと作れる</p>

<h3>ライブラリ</h3>

<p>紹介されたライブラリ. <a href="https://github.com/JakeWharton/hugo">JakeWharton</a>さんは, Android Annotationのプロらしい.</p>

<ul>
<li><a href="https://github.com/JakeWharton/hugo">Hugo</a></li>
<li><a href="https://github.com/frankiesardo/icepick">Icepick</a></li>
<li><a href="https://github.com/square/retrofit">Retrofit</a></li>
<li><a href="https://github.com/JakeWharton/butterknife">Butter knife</a></li>
</ul>

<h2>Android アプリ開発における Gradle ビルドシステム @nobuoka さん</h2>

<p>Gradleについての知見.</p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/38432268 " width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="margin-top: 0px !important; border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<h3>GradleとAndroid アプリ開発</h3>

<h4>Gradleとは</h4>

<ul>
<li>ビルドシステム</li>
<li>ビルド設定はGroovyによるDSL</li>
<li>Mavenによる依存関係が組み込まれている</li>
<li>最近は C/C++/Objective-Cもサポートされ始めた</li>
</ul>

<h4>利点と欠点</h4>

<ul>
<li>自由度が高い(Groovyの処理を書ける)</li>
<li>Maven リポジトリが使える</li>
<li>Groovyになれるまで難しい

<ul>
<li>デバッグとか難しい</li>
</ul></li>
</ul>

<h3>GradleやAndroid Gradle pluginの便利機能</h3>

<ul>
<li>デバッグ時だけ機能を変化させることができる</li>
<li>Build Variants

<ul>
<li>Build types</li>
<li>Product Flavors: 同じアプリから複数アプリ</li>
</ul></li>
<li>BuildConfigのプロパティをビルド時に決定</li>
</ul>

<h3>Gradleプラグインの作り方</h3>

<p>作り方も使い方も簡単</p>

<h4>プラグインの利点</h4>

<ul>
<li>再利用可能</li>
<li>Groovyでもかけるし, JavaやScalaでも書ける</li>
</ul>

<h2>感想とか</h2>

<p>久々に勉強会に参加したけど, 自分の知らない発見とかあってよかった.</p>

<p>個人的には, <a href="https://twitter.com/rejasupotaro">@rejasupotaro</a>さんの業務の話が面白かった. リリースし過ぎるとレビューでdisられるとか, なるほどアプリって大変だって思った.</p>

<p><a href="https://twitter.com/_kaiinui">@_kaiinui</a>さんのJava Annnotaion, 黒魔術だ〜全く便利じゃないって言っておられたけど普通に便利だなとおもった.</p>

<p>Android勉強会, 関西で定期的に開催されるらしいし次も是非参加したい. 今度は是非<a href="https://twitter.com/yucchiy_/status/503061258065547264">この夏もっとおしゃれなTシャツ</a>をゲットしたい.</p>

<h2>参考資料</h2>

<ul>
<li><a href="http://yulily100.hatenablog.jp/entry/2014/08/27/112604">デザイナーがandroidのXMLコーディングをやる利点について発表しました - yulily100&#39;s blog</a></li>
<li><a href="http://vividcode.hatenablog.com/entry/study-meeting/kyoto-android-2014-08">発表資料: Android アプリ開発における Gradle ビルドシステム (京都 Android 勉強会 2014.08) - ひだまりソケットは壊れない</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidエンジニアになった僕の開発環境と学習法]]></title>
    <link href="http://blog.yucchiy.com/2014/08/14/android-beginner-how-to-studying/"/>
    <updated>2014-08-14T23:43:33+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/14/android-beginner-how-to-studying</id>
    <content type="html"><![CDATA[<p>3,4年ウェッブエンジニアだった僕が, Androidエンジニアにジョブチェンして1週間経った(もちろん今まで通りウェブエンジニアは続けるけど). そんな僕がどういうふうにAndroidについて学習してるか記事にしてみた.</p>

<p>まだAndroidエンジニアになってから間もないので, この記事を見た方で, これは間違ってるよとか, このやり方が良いよって意見がある方は, ぜひコメントとか<a href="https://twitter.com/yucchiy_">@yucchiy_</a>までリプライとかしてもらえると嬉しいです.</p>

<h2>開発環境</h2>

<p>まず学習法とかの前に環境どうしてるかについて. 結論は<strong>Android Studio</strong>をベースとして開発環境を整えるのがしっくりきてる.</p>

<h3>Eclipse vs Android Studio</h3>

<p>Eclipse vs Android Studioだけど, 普段からWebStormとかPHPStormを使うことが多かったのでInteliJ PlatformなAndroid Studioを開発環境として選択した.</p>

<h4>Android Studioのインストール</h4>

<p>Android Studioは, Caskからコマンド一つでインストールできる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew cask install android-studio
</code></pre></div>
<p>またAndroid SDKは, Android Studioに入ってるものもあるが, スタンドアロンなSDKを用意しておく方が検証が楽そう. Homebrewを使ってる場合は, 以下のコマンドでインストールできる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">brew install android-studio
</code></pre></div>
<p>Android StudioからスタンドアロンなSDKにパスを通すには<code>Project Structure</code>(多分<code>Cmd +</code>で立ち上がるやつ)から,SDK Location &gt; Android SDK Locationで設定できる. BrewでインストールしたSDKは<code>/user/local/Cellar/android-studio</code>に配置されている.</p>

<h4>Android Studioの便利なショートカット</h4>

<p>多分Eclipseにもあるんだろうけど<strong>便利なショートカットが豊富</strong>で, <code>Cmd + b</code>でクラスの定義元に飛んだり, Can&#39;t resolve errorが出てて, importするだけで解決するような場合は, 該当行に移動して<code>Alt + Shift</code>すると勝手にimportを行ってくれたり, クラスとかゲッター・セッターを自動で定義したかったら<code>Cmd + n</code>でいい感じにやってくれる. 多分他にもいろんな便利ショートカットが存在すると思うのでどんどん調べていきたい.</p>

<h3>動作確認</h3>

<p>手元に端末があったら, 特にこだわりがない限りは実機に転送して検証した方が良い. Androidデフォルトの端末は重たいし, 起動に時間がかかってストレスフルだった.</p>

<p>複数端末検証でエミュレータ使うなら<a href="http://www.genymotion.com/">Genymotion</a>一択だと思う. しかし手元の環境ではまだ動かせてない.</p>

<h2>学習法</h2>

<p>前提として僕はJavaのコーディング経験が半年弱くらい(?)有り, 主に<a href="https://gist.github.com/yucchiy/2885090">プログラミングコンテストでJavaを利用していた</a>. なので, Javaの基本的なコーティングとCollectionの使い方はなんとなく分かる. このへんの基本的な文法をしっかり抑えておかないと, Android開発は難しいと思うので, まず先にその辺をおさえておくのが良さそう.</p>

<h3>MixiのAndroidTrainingの基礎編を流し読み</h3>

<p>何もわからない状態だと簡単な画面遷移さえもままならないので, 軽く参考資料を流し読みした. ウェブの資料では, Mixiの<a href="https://github.com/mixi-inc/AndroidTraining">Androidのテキスト</a>が情報がまとまっていてよかった. ただし<strong>全部理解しようとするのではなく</strong>, どんなことをするのにこういうものを使えばいい, くらいを抑えておくので十分そう. ActivityとFragmentがどうなってるとか, Intent使うと画面遷移できるとか, Viewの作り方とかどうするかとか, その辺を抑えるだけでも十分だと思う.</p>

<p>特にAndroidは覚えることが多そうで, それらをちゃんと把握しきるのは大変なので, 作りながら<strong>困ったときやリファクタリング時に</strong>はじめて詳しく調べるのが効率が良さそう.</p>

<h3>作りたいものを決めてGithubを漁る</h3>

<p>僕がAndroidアプリで作ろうものは, とあるウェブサービスからOAuth連携して, APIからデータを引っ張ってきてデータを表示するビュワーアプリである. まずやったこととして, 「android oauth」でGithubで調べて, なんとなく<strong>スターが多いライブラリ</strong>を見つけてその<strong>サンプルのソースを写経</strong>することをした.</p>

<p>具体的には, <a href="https://github.com/wuman/android-oauth-client">wuman/android-oauth-client</a>というライブラリがあって, その<a href="https://github.com/wuman/android-oauth-client/tree/master/samples">サンプル</a>がかなり充実していたので, それを写経したり, さらにサンプルをいじって遊んだした.</p>

<p>この時<strong>動作検証のサイクルをこまめに行なう</strong>ということを注意して行った.</p>

<p>というのも, まだ慣れてない状態でまとめて写経して検証を行うと, 写経をミスっていたり, そのサンプルを更にいじったりするときに, 問題の切り分けが難しくなる. そのため, こまめに動作検証を行なったほうが学習効率が良い. 細かく動作検証を行うには, そのサンプルがどの順番で動くかをちゃんと把握しないといけないので, <strong>Androidのライフサイクルの理解が深まったり</strong>とか一石二鳥だと思う.</p>

<p>このように学習することで, APIの連携にはどういうライブラリを使えばいいとか, <a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/api/model/Tweet.java">APIとクラスのインスタンスの紐付け</a>をどうするとか, AsyncTaskLoaderは<a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/TwitterActivity.java#L137">独自のローダを定義しておく</a>と何かと便利そうだとか, ListViewへアダプタ渡すときは<a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/TwitterActivity.java#L206">Decoratorパターン用意してアダプタとローダをセットで渡す</a>とスッキリかけて良いし再利用しやすそうだとか, 様々な知見が得られるし, アプリを作る上で必要な知見を効率よく学習できると思う.</p>

<h3>復習として作ったあとに情報整理</h3>

<p>作りたいものがある程度作れたら, 使ったクラスを詳しく調べなおしたり, Mixiのテキストで使った箇所を詳しく読んでみたり, 冗長になってしまった箇所をリファクタリングしてみたりすると, やったことを深く理解できると思うし忘れにくい知識が身につくと思う.</p>

<h2>まとめ</h2>

<p>ざっくり, Androidエンジニアになって1週間の僕の実践している学習法について書いてみた. まとめると, Githubとかで先人の知恵を得ることと, 必要になったクラスとか機能を学ぶことで, 効率的に実践的なコーディングができるんではということを長々と書いた.</p>

<p>冒頭にも書いたけどもっと良いやり方があるとか, これはおかしいと思うことがアレば, コメントとか<a href="https://twitter.com/yucchiy_">@yucchiy_</a>へどうぞ.</p>
]]></content>
  </entry>
  
</feed>
