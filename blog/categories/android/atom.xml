<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: android | Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/blog/categories/android/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2014-08-20T17:43:47+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Androidエンジニアになった僕の開発環境と学習法]]></title>
    <link href="http://blog.yucchiy.com/2014/08/14/android-beginner-how-to-studying/"/>
    <updated>2014-08-14T23:43:33+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/14/android-beginner-how-to-studying</id>
    <content type="html"><![CDATA[<p>3,4年ウェッブエンジニアだった僕が, Androidエンジニアにジョブチェンして1週間経った(もちろん今まで通りウェブエンジニアは続けるけど). そんな僕がどういうふうにAndroidについて学習してるか記事にしてみた.</p>

<p>まだAndroidエンジニアになってから間もないので, この記事を見た方で, これは間違ってるよとか, このやり方が良いよって意見がある方は, ぜひコメントとか<a href="https://twitter.com/yucchiy_">@yucchiy_</a>までリプライとかしてもらえると嬉しいです.</p>

<h2>開発環境</h2>

<p>まず学習法とかの前に環境どうしてるかについて. 結論は<strong>Android Studio</strong>をベースとして開発環境を整えるのがしっくりきてる.</p>

<h3>Eclipse vs Android Studio</h3>

<p>Eclipse vs Android Studioだけど, 普段からWebStormとかPHPStormを使うことが多かったのでInteliJ PlatformなAndroid Studioを開発環境として選択した.</p>

<h4>Android Studioのインストール</h4>

<p>Android Studioは, Caskからコマンド一つでインストールできる.</p>

<pre><code>brew cask install android-studio
</code></pre>

<p>またAndroid SDKは, Android Studioに入ってるものもあるが, スタンドアロンなSDKを用意しておく方が検証が楽そう. Homebrewを使ってる場合は, 以下のコマンドでインストールできる.</p>

<pre><code>brew install android-studio
</code></pre>

<p>Android StudioからスタンドアロンなSDKにパスを通すには<code>Project Structure</code>(多分<code>Cmd +</code>で立ち上がるやつ)から,SDK Location > Android SDK Locationで設定できる. BrewでインストールしたSDKは<code>/user/local/Cellar/android-studio</code>に配置されている.</p>

<h4>Android Studioの便利なショートカット</h4>

<p>多分Eclipseにもあるんだろうけど<strong>便利なショートカットが豊富</strong>で, <code>Cmd + b</code>でクラスの定義元に飛んだり, Can&rsquo;t resolve errorが出てて, importするだけで解決するような場合は, 該当行に移動して<code>Alt + Shift</code>すると勝手にimportを行ってくれたり, クラスとかゲッター・セッターを自動で定義したかったら<code>Cmd + n</code>でいい感じにやってくれる. 多分他にもいろんな便利ショートカットが存在すると思うのでどんどん調べていきたい.</p>

<h3>動作確認</h3>

<p>手元に端末があったら, 特にこだわりがない限りは実機に転送して検証した方が良い. Androidデフォルトの端末は重たいし, 起動に時間がかかってストレスフルだった.</p>

<p>複数端末検証でエミュレータ使うなら<a href="http://www.genymotion.com/">Genymotion</a>一択だと思う. しかし手元の環境ではまだ動かせてない.</p>

<h2>学習法</h2>

<p>前提として僕はJavaのコーディング経験が半年弱くらい(?)有り, 主に<a href="https://gist.github.com/yucchiy/2885090">プログラミングコンテストでJavaを利用していた</a>. なので, Javaの基本的なコーティングとCollectionの使い方はなんとなく分かる. このへんの基本的な文法をしっかり抑えておかないと, Android開発は難しいと思うので, まず先にその辺をおさえておくのが良さそう.</p>

<h3>MixiのAndroidTrainingの基礎編を流し読み</h3>

<p>何もわからない状態だと簡単な画面遷移さえもままならないので, 軽く参考資料を流し読みした. ウェブの資料では, Mixiの<a href="https://github.com/mixi-inc/AndroidTraining">Androidのテキスト</a>が情報がまとまっていてよかった. ただし<strong>全部理解しようとするのではなく</strong>, どんなことをするのにこういうものを使えばいい, くらいを抑えておくので十分そう. ActivityとFragmentがどうなってるとか, Intent使うと画面遷移できるとか, Viewの作り方とかどうするかとか, その辺を抑えるだけでも十分だと思う.</p>

<p>特にAndroidは覚えることが多そうで, それらをちゃんと把握しきるのは大変なので, 作りながら<strong>困ったときやリファクタリング時に</strong>はじめて詳しく調べるのが効率が良さそう.</p>

<h3>作りたいものを決めてGithubを漁る</h3>

<p>僕がAndroidアプリで作ろうものは, とあるウェブサービスからOAuth連携して, APIからデータを引っ張ってきてデータを表示するビュワーアプリである. まずやったこととして, 「android oauth」でGithubで調べて, なんとなく<strong>スターが多いライブラリ</strong>を見つけてその<strong>サンプルのソースを写経</strong>することをした.</p>

<p>具体的には, <a href="https://github.com/wuman/android-oauth-client">wuman/android-oauth-client</a>というライブラリがあって, その<a href="https://github.com/wuman/android-oauth-client/tree/master/samples">サンプル</a>がかなり充実していたので, それを写経したり, さらにサンプルをいじって遊んだした.</p>

<p>この時<strong>動作検証のサイクルをこまめに行なう</strong>ということを注意して行った.</p>

<p>というのも, まだ慣れてない状態でまとめて写経して検証を行うと, 写経をミスっていたり, そのサンプルを更にいじったりするときに, 問題の切り分けが難しくなる. そのため, こまめに動作検証を行なったほうが学習効率が良い. 細かく動作検証を行うには, そのサンプルがどの順番で動くかをちゃんと把握しないといけないので, <strong>Androidのライフサイクルの理解が深まったり</strong>とか一石二鳥だと思う.</p>

<p>このように学習することで, APIの連携にはどういうライブラリを使えばいいとか, <a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/api/model/Tweet.java">APIとクラスのインスタンスの紐付け</a>をどうするとか, AsyncTaskLoaderは<a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/TwitterActivity.java#L137">独自のローダを定義しておく</a>と何かと便利そうだとか, ListViewへアダプタ渡すときは<a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/TwitterActivity.java#L206">Decoratorパターン用意してアダプタとローダをセットで渡す</a>とスッキリかけて良いし再利用しやすそうだとか, 様々な知見が得られるし, アプリを作る上で必要な知見を効率よく学習できると思う.</p>

<h3>復習として作ったあとに情報整理</h3>

<p>作りたいものがある程度作れたら, 使ったクラスを詳しく調べなおしたり, Mixiのテキストで使った箇所を詳しく読んでみたり, 冗長になってしまった箇所をリファクタリングしてみたりすると, やったことを深く理解できると思うし忘れにくい知識が身につくと思う.</p>

<h2>まとめ</h2>

<p>ざっくり, Androidエンジニアになって1週間の僕の実践している学習法について書いてみた. まとめると, Githubとかで先人の知恵を得ることと, 必要になったクラスとか機能を学ぶことで, 効率的に実践的なコーディングができるんではということを長々と書いた.</p>

<p>冒頭にも書いたけどもっと良いやり方があるとか, これはおかしいと思うことがアレば, コメントとか<a href="https://twitter.com/yucchiy_">@yucchiy_</a>へどうぞ.</p>
]]></content>
  </entry>
  
</feed>
