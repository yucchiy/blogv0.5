<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cpp | Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/blog/categories/cpp/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2015-01-13T12:12:55+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenCV3のCommandLineParserを使って簡単にコマンドライン引数を受け取る]]></title>
    <link href="http://blog.yucchiy.com/2014/10/24/opencv3-commandline-parser/"/>
    <updated>2014-10-24T06:00:02+09:00</updated>
    <id>http://blog.yucchiy.com/2014/10/24/opencv3-commandline-parser</id>
    <content type="html"><![CDATA[<p>OpenCVには<code>CommandLineParser</code>というクラスが2.3.0以降から実装されており, これを用いることで特にオプション引数を簡単にパースすることができる.
ただOpenCVの<code>CommandLineParser</code>は, <strong>頻繁にその仕様が変わっており</strong>, 特に日本語で調べると2.3, 2.4系の仕様について出てくるので,
今回はOpenCV3の<code>CommandLineParser</code>を紹介する.</p>

<h2>使い方</h2>

<p><code>cv::CommandLineParser</code>は, <code>opencv2/core.hpp</code>で定義されているのでインクルードするようにする. (ただ, ほぼ確実にインクルードするファイルなのでまず忘れないと思う.)</p>

<p>サンプルは以下のとおり.</p>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#include &lt;opencv2/core.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">const</span> <span class="n">cv</span><span class="o">::</span><span class="n">String</span> <span class="n">keys</span> <span class="o">=</span>
</span><span class='line'>    <span class="s">&quot;{help h usage |      | print this message   }&quot;</span>
</span><span class='line'>    <span class="s">&quot;{@image1      |      | image1 for compare   }&quot;</span>
</span><span class='line'>    <span class="s">&quot;{@image2      |      | image2 for compare   }&quot;</span>
</span><span class='line'>    <span class="s">&quot;{@repeat      |1     | number               }&quot;</span>
</span><span class='line'>    <span class="s">&quot;{path         |.     | path to file         }&quot;</span>
</span><span class='line'>    <span class="s">&quot;{fps          | -1.0 | fps for output video }&quot;</span>
</span><span class='line'>    <span class="s">&quot;{N count      |100   | count of objects     }&quot;</span>
</span><span class='line'>    <span class="s">&quot;{ts timestamp |      | use time stamp       }&quot;</span>
</span><span class='line'>    <span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span><span class="o">*</span> <span class="n">argv</span><span class="p">[])</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">CommandLineParser</span> <span class="n">parser</span><span class="p">(</span><span class="n">argc</span><span class="p">,</span> <span class="n">argv</span><span class="p">,</span> <span class="n">keys</span><span class="p">);</span>
</span><span class='line'>    <span class="n">parser</span><span class="p">.</span><span class="n">about</span><span class="p">(</span><span class="s">&quot;A Sample of CommandLineParser&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">parser</span><span class="p">.</span><span class="n">has</span><span class="p">(</span><span class="s">&quot;h&quot;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">parser</span><span class="p">.</span><span class="n">printMessage</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;N&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">fps</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="kt">double</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;fps&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">String</span> <span class="n">path</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">(</span><span class="s">&quot;path&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">bool</span> <span class="n">use_time_stamp</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">has</span><span class="p">(</span><span class="s">&quot;timestamp&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">String</span> <span class="n">img1</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">String</span> <span class="n">img2</span> <span class="o">=</span> <span class="n">parser</span><span class="p">.</span><span class="n">get</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">String</span><span class="o">&gt;</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">parser</span><span class="p">.</span><span class="n">check</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">parser</span><span class="p">.</span><span class="n">printErrors</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以下のように使う.</p>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="o">/</span><span class="n">app</span> <span class="o">-</span><span class="n">N</span><span class="o">=</span><span class="mi">200</span> <span class="mf">1.</span><span class="n">png</span> <span class="mf">2.</span><span class="n">jpg</span> <span class="mi">19</span> <span class="o">-</span><span class="n">ts</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>引数の指定</h3>

<p>引数の指定は, <code>cv::String</code>で特定のフォーマットでコンストラクタに渡してやることで行う.
フォーマットは以下のとおり.</p>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="s">&quot;{ オプション名 | デフォルト引数 | オプションの説明 }&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>オプション名には, スペース区切りでオプションを複数指定できる. <code>cv::CommandLineParser</code>にはショートオプションとロングオプションの
区別はなく, 例えば上の例だと<code>-h</code>でも<code>--h</code>でもヘルプが呼び出される.</p>

<p>オプション名の先頭の@をつけると普通の引数として解釈される.</p>

<p>デフォルト引数はそのままで, 何も指定しないとこの値が返却される.</p>

<p>オプションの説明は, <code>printMessage</code>メソッドを呼び出した時に表示される説明. 例えば上記の例で<code>printMessage</code>を呼び出すと以下のようなメッセージが表示される.</p>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="n">A</span> <span class="n">Sample</span> <span class="n">of</span> <span class="n">CommandLineParser</span>
</span><span class='line'><span class="nl">Usage</span><span class="p">:</span> <span class="n">cmd</span> <span class="p">[</span><span class="n">params</span><span class="p">]</span> <span class="n">image1</span> <span class="n">image2</span> <span class="n">repeat</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">-</span><span class="n">N</span><span class="p">,</span> <span class="o">--</span><span class="n">count</span> <span class="p">(</span><span class="nl">value</span><span class="p">:</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>                <span class="n">count</span> <span class="n">of</span> <span class="n">objects</span>
</span><span class='line'>        <span class="o">--</span><span class="n">fps</span> <span class="p">(</span><span class="nl">value</span><span class="p">:</span><span class="o">-</span><span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>                <span class="n">fps</span> <span class="k">for</span> <span class="n">output</span> <span class="n">video</span>
</span><span class='line'>        <span class="o">-</span><span class="n">h</span><span class="p">,</span> <span class="o">--</span><span class="n">help</span><span class="p">,</span> <span class="o">--</span><span class="n">usage</span> <span class="p">(</span><span class="nl">value</span><span class="p">:</span><span class="nb">true</span><span class="p">)</span>
</span><span class='line'>                <span class="n">print</span> <span class="k">this</span> <span class="n">message</span>
</span><span class='line'>        <span class="o">--</span><span class="n">path</span> <span class="p">(</span><span class="nl">value</span><span class="p">:.)</span>
</span><span class='line'>                <span class="n">path</span> <span class="n">to</span> <span class="n">file</span>
</span><span class='line'>        <span class="o">--</span><span class="n">timestamp</span><span class="p">,</span> <span class="o">--</span><span class="n">ts</span>
</span><span class='line'>                <span class="n">use</span> <span class="n">time</span> <span class="n">stamp</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">image1</span>
</span><span class='line'>                <span class="n">image1</span> <span class="k">for</span> <span class="n">compare</span>
</span><span class='line'>        <span class="n">image2</span>
</span><span class='line'>                <span class="n">image2</span> <span class="k">for</span> <span class="n">compare</span>
</span><span class='line'>        <span class="n">repeat</span> <span class="p">(</span><span class="nl">value</span><span class="p">:</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>                <span class="n">number</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3>引数の受け取り</h3>

<p>引数の受け取りは, <code>get</code>メソッドを用いて行う. 引数に文字列を渡すと, それに対応したオプション引数の値を, int値を渡すと対応した引数を取得できる.
テンプレート引数には受け取りたい型を指定する.</p>

<p>オプション引数が指定されたかどうかを確認したい場合は, <code>has</code>メソッドを用いる事もできる. これはオプション引数が存在するかどうかをbool値で返すメソッドである.</p>

<h3>引数のチェック</h3>

<p><code>check</code>メソッドを実行すると, <code>get</code>メソッドで指定した型について, 正しい引数の値を渡したかどうかをチェックして, その結果をbool値で受け取ることができる.</p>

<p>例えば上記のプログラムを, 以下のように実行した場合(つまり, 本来はint値を渡すところを文字列を渡した)</p>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="p">.</span><span class="o">/</span><span class="n">cmd</span> <span class="o">-</span><span class="n">N</span><span class="o">=</span><span class="n">hoge</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>以下の様なエラーを, <code>printErrors</code>メソッドにより出力することができる.</p>

<p>このメソッドには1点注意が必要で, <strong>必ず<code>get</code>メソッドを呼び終わったあとに実行</strong>しないとチェックの結果が正しく返却されない.</p>

<h3>まとめ</h3>

<p><code>cv::CommandLineParser</code>を用いると, 簡単にコマンドライン引数を解析することができる.
もちろんこれよりも高機能(?)なライブラリは存在するが, OpenCVのみの環境でコマンドラインツールを開発する際は手軽で良い.</p>

<p>ただ個人的に, 引数の指定の際に必須であるかというチェックを行えて, かつ<code>check</code>メソッドでチェックできると良いなーと思った.</p>

<h3>参考</h3>

<ul>
<li><a href="http://docs.opencv.org/trunk/modules/core/doc/command_line_parser.html">http://docs.opencv.org/trunk/modules/core/doc/command<em>line</em>parser.html</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
