<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ruby | Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2015-01-22T23:19:08+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[FigでRailsの開発環境を構築する]]></title>
    <link href="http://blog.yucchiy.com/2014/12/30/rails-docker-fig/"/>
    <updated>2014-12-30T13:27:47+09:00</updated>
    <id>http://blog.yucchiy.com/2014/12/30/rails-docker-fig</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>個人で運用しているサービスをGKEにのせるついでに, 開発環境もDockerで統一しようと思い, FigでRailsの開発環境を構築したときのメモ.
基本的には, <a href="http://yuuki.hatenablog.com/entry/next-is-docker">Perlはもう古い、これからはDocker</a> のRails版である.</p>

<p>以下の環境で動作確認を行った.</p>

<ul>
<li>OS・パッケージ管理

<ul>
<li>Mac OSX Yosemite 10.10.1</li>
<li>Homebrew 0.9.5</li>
</ul></li>
<li>ソフトウェア

<ul>
<li>Docker 1.4.1</li>
<li>Boot2docker 1.4.1</li>
<li>Fig 1.0.1</li>
</ul></li>
</ul>

<p>今回はサンプルに, <a href="http://railstutorial.jp/">Ruby on Rails Tutorial</a> のサンプルソースを用いた. ただし, データベースの設定の都合,
<a href="https://github.com/yucchiy/sample_app_rails_4">いくつか変更を加えたもの</a>を用いた.</p>

<p>サンプルコードは, <a href="https://github.com/yucchiy/dockerized-rails-app">https://github.com/yucchiy/dockerized-rails-app</a> より確認できる.</p>

<h2>準備</h2>

<p>Railsアプリを開発するときにRedisやMySQLなどのミドルウェアが必要になった時, Railsアプリケーションのはいったコンテナに
ミドルウェアを導入しないほうが良い. これは, Dockerでは<a href="http://yuuki.hatenablog.com/entry/next-is-docker">1コンテナ1デーモンを前提に</a>していることなどがあげられる.</p>

<p>しかし, 複数コンテナになると, <strong>コンテナ間のリンクなどの管理が面倒</strong>になるので, Figを用いる.</p>

<h3>ベースとなるRubyのコンテナイメージを作成</h3>

<p>まず, dockerでRailsの実行環境を構築する. 上記のサンプルを動作させるには, ruby 2.0.0 の実行環境が必要である.
Ubuntu14.04上でそのような環境を構築するために, 以下の<code>Dockerfile</code>を用意し, ベースとなるイメージを用意する.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">FROM ubuntu:14.04
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update &amp;&amp; \
    apt-get install -yq --force-yes build-essential wget curl git ssh

RUN apt-get install -yq --force-yes zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev &amp;&amp; \
    apt-get clean

RUN git clone https://github.com/sstephenson/rbenv.git /root/.rbenv
RUN git clone https://github.com/sstephenson/ruby-build.git /root/.rbenv/plugins/ruby-build
RUN /root/.rbenv/plugins/ruby-build/install.sh
ENV PATH /root/.rbenv/bin:$PATH
RUN echo &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt; /etc/profile.d/rbenv.sh # or /etc/profile
RUN echo &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt; .bashrc

ENV CONFIGURE_OPTS --disable-install-doc
ENV RUBY_VERSION 2.0.0-p598

RUN rbenv install $RUBY_VERSION
RUN echo &#39;gem: --no-rdoc --no-ri&#39; &gt;&gt; /.gemrc
RUN bash -l -c &#39;rbenv global $RUBY_VERSION; gem install bundler;&#39;
</code></pre></div>
<p>以下のコマンドでビルドを行う.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ docker build --tag=yucchiy/ruby:2.0.0 .
</code></pre></div>
<p>このような用途のイメージは使いまわしやすいので, 上記のようにして, イメージを分割しておくと良い(更にいうと ベースとなるOSに
gitやsshといった, どこでも使いそうなパッケージをインストールしたベースパッケージを用意しておくとGood).
この時, <a href="https://github.com/y-uuki/dockerfiles/blob/master/perl/5.20.1/Dockerfile">イメージサイズを小さくする工夫しておく</a>
と, シュッとしてなにかと便利です.</p>

<p>(余談だが, 特にMySQLなど, サーバーとクライアントで実行するコマンドが異なったり, 実行するコマンドが長くなると,
<a href="https://github.com/yucchiy/dockerfiles/blob/master/mysql/Makefile">Makefileでタスクを管理</a>すると, 何かと便利である.)</p>

<h3>アプリケーションを実行するためのコンテナの作成</h3>

<p>上記のRubyコンテナを用いて, サンプルの実行環境を構築する. 具体的には以下の<code>Dockerfile</code>を用意する.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">FROM yucchiy/ruby:2.0.0

RUN \
    apt-get install -yq --force-yes mysql-client-5.5 libmysqlclient-dev libssl-dev nodejs &amp;&amp; \
    apt-get clean

RUN mkdir -p /app
WORKDIR /app
COPY ./sample_app_rails_4/Gemfile /app/Gemfile
RUN bash -l -c &#39;bundle install&#39;

COPY ./sample_app_rails_4 /app

EXPOSE 3000
CMD bash -l -c &#39;bundle exec rails s&#39;
</code></pre></div>
<p>ポイントは<code>COPY ./sample_app_rails_4/Gemfile /app/Gemfile</code>で, 先に<code>Gemfile</code>をCOPYすることで,
<code>Gemfile</code>に変更がない時は, <code>bundle install</code>のフルインストールを行わない
<a href="http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/">テクニック</a>を利用している.</p>

<h2>Figによる複数コンテナの管理</h2>

<p>Figを用いて, 複数コンテナの管理をする. 具体的には<code>fig.yml</code>を用意する. 以下に, サンプルソースを, MySQLを用いて
実行するための<code>fig.yml</code>の例を示す.</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql:5.6</span>
  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD=himitsunopassword</span>
  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="s">&quot;3306&quot;</span>
  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/storage/mysql:/var/lib/mysql</span>
<span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bash -l -c &#39;bundle exec rails server --port=3000 --binding=0.0.0.0&#39;</span>
  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="s">&quot;3000:3000&quot;</span>
  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./sample_app_rails_4:/app</span>
  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db</span>
</code></pre></div>
<p><a href="http://www.fig.sh/yml.html">公式ドキュメント</a>と, <a href="http://www.fig.sh/rails.html">公式のRails環境の構築方法</a>を参考にした.</p>

<p>今回, MySQLのコンテナとして, <a href="https://registry.hub.docker.com/_/mysql/">https://registry.hub.docker.com/_/mysql/</a>を用いた.
設定を変更するにはいくつか方法があるが, <code>/etc/mysql</code>が<code>VOLUME</code>に登録されているらしく, 
複数の設定を変更したいときは, <code>/home/my-etcmysql:/etc/mysql</code>という感じで<code>/etc/mysql</code>に自分のディレクトリをマウントすることで,
ごっそり設定ファイルを入れ替えることができる.</p>

<p>次に, 以下のコマンドでコンテナのビルドを行う.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ fig build
</code></pre></div>
<h3>データベースの設定</h3>

<p>figで管理しているデータベースの設定は, <a href="https://docs.docker.com/userguide/dockerlinks/">環境変数を介して取得できる</a>.
アプリケーションのコンテナに設定されている環境変数は, 以下のコマンドで確認できる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ fig run web env
</code></pre></div>
<p>これを用いてデータベースの接続先を設定するには, 以下のように記述する.</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql2</span>
  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">utf8</span>
  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sample_app_rails_4_development</span>
  <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;DB_ENV_MYSQL_ROOT_PASSWORD&#39;] %&gt;</span>
  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;DB_PORT_3306_TCP_ADDR&#39;] %&gt;</span>
  <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;DB_PORT_3306_TCP_PORT&#39;] %&gt;</span>
  <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5000</span>
</code></pre></div>
<h3>データベースの作成・マイグレーション</h3>

<p><code>fig run</code>を用いて, 以下のように行う.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ fig run web bash -l -c &#39;bundle exec rake db:create db:migrate&#39;
</code></pre></div>
<h3>Figによるコンテナの起動</h3>

<p><code>fig up</code>で, 管理しているコンテナをまとめて起動できる. また, 個別に起動をすることも可能である.</p>

<h2>まとめ</h2>

<p>Figを用いて, 複数コンテナを管理する方法を紹介した. 今後は, 実際に開発する際のノウハウ(テストなど)や, 本番環境での運用についてまとめたい.</p>

<h2>参考(環境構築)</h2>

<h3>Homebrewによるツールのインストール</h3>

<p>今回想定する環境では, 今回利用するDocker・Boot2docker・Figは, いずれもHomebrewでインストールできる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ brew install docker boot2docker fig
</code></pre></div>
<h3>Boot2dockerのセットアップ</h3>

<p>boot2dockerを利用するためには, まず初期化を行う.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ boot2docker init
</code></pre></div>
<p>次に, boot2dockerに環境変数を設定する. 以下のコマンドを実行することで, 一括で設定を行うことができる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(boot2docker initshell)
</code></pre></div>
<p>以下を実行することで出力される設定をそのまま<code>.bashrc</code>に書いても良いが,
<a href="http://qiita.com/deeeet/items/518704402e9bc5995ecc">このコマンドをシェル起動時都度実行する</a>ほうが良い.</p>

<p>設定後は, 以下のコマンドでboot2dockerを操作できる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ boot2docker start # 起動
$ boot2docker stop  # 終了
</code></pre></div>
<h3>参考ページ</h3>

<ul>
<li><a href="http://yuuki.hatenablog.com/entry/next-is-docker">Perlはもう古い、これからはDocker</a></li>
<li><a href="http://qiita.com/cieux1@github/items/b2294f8adddefb357a37">【翻訳】DockerとVagrantによるRails開発環境</a></li>
<li><a href="http://deeeet.com/writing/2014/12/01/docker-link-pattern/">Dockerコンテナ接続パターン (2014年冬)</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで簡単にバッチ処理の並列化を行う]]></title>
    <link href="http://blog.yucchiy.com/2014/10/14/ruby-batch-parallel/"/>
    <updated>2014-10-14T12:22:27+09:00</updated>
    <id>http://blog.yucchiy.com/2014/10/14/ruby-batch-parallel</id>
    <content type="html"><![CDATA[<p>研究のプログラムで, さくっと結果出したいけど, パラメータのチューニングも面倒なので,
適当に指定したパラメータの組み合わせを与えて, プログラムを回したいことは結構多いと思う.</p>

<p>その時に同じプログラムに異なるパラメータを投げて, そのバッチ実行を並列化したい, ということをRubyだと簡単にできるので紹介.
ちなみに動作環境は, Mac OS X Mavericksで, Rubyは2.1.3を利用している.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="c1">#!/usr/bin/env ruby</span>

<span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
<span class="nb">require</span> <span class="s1">&#39;parallel&#39;</span>

<span class="n">num_process</span> <span class="o">=</span> <span class="mi">4</span>


<span class="n">ps1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
<span class="n">ps2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
<span class="n">ps3</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>

<span class="no">Parallel</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="n">ps1</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">ps2</span><span class="p">,</span> <span class="n">ps3</span><span class="p">),</span> <span class="ss">:in_processes</span> <span class="o">=&gt;</span> <span class="n">num_thread</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
  <span class="n">p1</span> <span class="o">=</span> <span class="n">e</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
  <span class="n">p2</span> <span class="o">=</span> <span class="n">e</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
  <span class="n">p3</span> <span class="o">=</span> <span class="n">e</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>

  <span class="n">cmd</span> <span class="o">=</span> <span class="s2">&quot;./hoge </span><span class="si">#{</span><span class="n">p1</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">p2</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">p3</span><span class="si">}</span><span class="s2">&quot;</span>
  <span class="nb">system</span> <span class="n">cmd</span>
<span class="k">end</span>
</code></pre></div>
<p>ポイントは, <code>Parallel#each</code>に渡す配列を<code>Array#product</code>メソッドを用いて組み合わせを生成しているところで, こうすると, <code>ps1</code>, <code>ps2</code>, <code>ps3</code>のパラメータの組み合わせを簡単に列挙できる.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでAPIを作るときのエラー処理について]]></title>
    <link href="http://blog.yucchiy.com/2014/08/31/error-rails-api/"/>
    <updated>2014-08-31T20:20:27+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/31/error-rails-api</id>
    <content type="html"><![CDATA[<p><a href="http://blog.yucchiy.com/2014/08/20/delivery-api-with-rails/">RailsでAPIを雑に書いていたんだけど</a>, コントローラとかをどう書くとエラー処理しやすくなっていいかなーと考えていて, 個人的に考えがまとまったのでブログ書いた.</p>

<p>※9/1に追記書いた.</p>

<h2>良いエラー処理について</h2>

<p>個人的にAPIを書く上で(API書くに限らない気はするけど)どういうふうにエラー処理を行うと良いかなーと考えてみると</p>

<ul>
<li>コントローラ内では基本的に, <strong>ある関数の処理が失敗して, 次の処理が行えない場合はすべて例外を投げる</strong></li>
<li>例外は各々のコントローラ内で例外のキャッチは行わず, すべてApplicationControllerなど, <strong>親コントローラ内の1メソッドで完結させる</strong></li>
</ul>

<p>かなーと思う. APIのエラー処理は, <a href="http://instagram.com/developer/endpoints/">Envelopeにステータスコードとエラーメッセージを書いて</a>, APIのフォーマットを統一するほうがクライアントが作りやすそうだし, またこのように処理することで, <strong>エラー処理での条件分岐の必要がなくなり</strong>, コントローラの可読性の向上にもつながる. </p>

<h2>Grape vs Rails</h2>

<p>APIつくるんだったら, <a href="https://www.google.co.jp/search?q=rails+api&amp;oq=rails+api+&amp;aqs=chrome..69i57j69i60l3j69i59j69i61.9488j0j1&amp;sourceid=chrome&amp;es_sm=119&amp;ie=UTF-8">Grapeサイコー</a>という意見が多い.</p>

<p>確かにGrapeのDSLは直感的に書けるし, バリデーションなど便利メソッドが多いけど, 個人的には素のRailsでAPIを書くほうがセンスが良いと感じる. というのもRackベースなので, ルーティングなど独自のものが多く, せっかくRailsが提供してるRakeのタスクや, ジェネレータがそのまま使えないからである.</p>

<p>SinatraとかでAPI納品するんだったら, Grapeとかいれるのはすごい良さそう.</p>

<p>ただ, そのままのRailsではJSONやXMLをいい感じの構造で返す仕組みが貧弱なので, <a href="https://github.com/nesquena/rabl">RABL</a>を導入するのが便利. これはJSONやXMLをいい感じに生成するためのテンプレートエンジンで, DSLを用いて直感的にAPI出力を定義できる.</p>

<p>また, <a href="https://github.com/nesquena/rabl/wiki/Using-Layouts">RailsのLayoutsにも対応しており</a>, <code>views/layouts/application.rabl</code>とかを定義しておくことで, <a href="http://instagram.com/developer/endpoints/">Envelope</a>みたいなのを簡単に実現できる.</p>

<h2>コントローラ内でのエラー処理</h2>

<p>上記に上げたとおり, コントローラ内でモデルのCRUDなどの<strong>処理が失敗した場合</strong>は例外を投げてApplicationControllerに処理を渡す.</p>

<p>例えば<code>show</code>メソッドでは以下のように処理する.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">show</span>
  <span class="vi">@piyo</span> <span class="o">=</span> <span class="no">Piyo</span><span class="o">.</span><span class="n">find_by!</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
<span class="k">end</span>
</code></pre></div>
<h2>ApplicationControllerでのエラー処理</h2>

<p>以下のようなConcernを定義し, ApplicationControllerから読み込むことでエラー処理を行う.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Api::ErrorHandlers</span>
  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>

  <span class="kp">attr_accessor</span> <span class="ss">:status</span><span class="p">,</span> <span class="ss">:message</span>

  <span class="n">included</span> <span class="k">do</span>
    <span class="n">before_filter</span> <span class="ss">:setup</span>
    <span class="n">rescue_from</span> <span class="no">StandardError</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="ss">:rescue_exception</span>
  <span class="k">end</span>

  <span class="kp">private</span>

  <span class="k">def</span> <span class="nf">rescue_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
    <span class="vi">@message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
    <span class="k">if</span> <span class="n">rescuable?</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
      <span class="n">re</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="p">)</span> <span class="p">?</span> <span class="n">e</span> <span class="p">:</span> <span class="no">RESCUABLE_EXCEPTIONS</span><span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
      <span class="vi">@status</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">status</span>
    <span class="k">else</span>
      <span class="vi">@status</span> <span class="o">=</span> <span class="mi">500</span>
      <span class="vi">@message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
    <span class="k">end</span>

    <span class="n">render</span> <span class="s1">&#39;api/errors/base&#39;</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">rescuable?</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="p">)</span> <span class="o">||</span> <span class="no">RESCUABLE_EXCEPTIONS</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">setup</span>
    <span class="vi">@status</span> <span class="o">=</span> <span class="mi">200</span>
    <span class="vi">@message</span> <span class="o">=</span> <span class="s2">&quot;OK&quot;</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>ポイントはすべての例外処理を<code>rescue_exception</code>で受け取るところである. この<code>rescue_exception</code>は投げられた例外によって, 適切なステータスコードとエラーメッセージをビューに渡すメソッドで, それらはEnvelopeとして出力される. 例えばRablのLayoutsで以下のように定義することでエラー出力する.</p>
<div class="highlight"><pre><code class="language-erb" data-lang="erb"><span class="x">{</span>
<span class="x">  &quot;status&quot;: </span><span class="cp">&lt;%=</span> <span class="vi">@status</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">html_safe</span> <span class="cp">%&gt;</span><span class="x">,</span>
<span class="x">  &quot;message&quot;: </span><span class="cp">&lt;%=</span> <span class="vi">@message</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">html_safe</span> <span class="cp">%&gt;</span><span class="x">,</span>
<span class="x">  &quot;data&quot;: </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
<span class="x">}</span>
</code></pre></div>
<p>ここで, 例外に対応するステータスコードを以下のように引く.</p>

<ol>
<li>独自の例外の場合は, その<strong>例外クラスにステータスを保持させる</strong></li>
<li>組み込みの例外（例えばActiveRecordのNotFoundException）の場合は, 例外に対応する<strong>ステータスコードの対応表から</strong>引く</li>
<li>それ以外の例外の場合は500を返す</li>
</ol>

<p>1の場合は, <code>Api::Exceptions::RescuableException</code>を作成して, それを継承した独自の例外クラスを投げて対応する.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">module</span> <span class="nn">Api::Exceptions</span>
  <span class="k">class</span> <span class="nc">RescuableException</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
    <span class="kp">attr_accessor</span> <span class="ss">:status</span>

    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">status</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Error&quot;</span><span class="p">)</span>
      <span class="k">super</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
      <span class="vi">@status</span> <span class="o">=</span> <span class="n">status</span>
    <span class="k">end</span>
  <span class="k">end</span>

  <span class="k">class</span> <span class="nc">UnAuthenticationException</span> <span class="o">&lt;</span> <span class="no">RescuableException</span>
    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Unauthorized&quot;</span><span class="p">)</span>
      <span class="k">super</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div>
<p>2の場合は, <code>RESCUEABLE_EXCEPTIONS</code>みたいなハッシュを作って対応する.</p>
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">RESCUABLE_EXCEPTIONS</span> <span class="o">=</span> <span class="p">{</span>
  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">=&gt;</span> <span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s2">&quot;Record Not Found&quot;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>
<p>3の場合は, 上に2つの条件を満たさない場合に500を返すように<code>rescue_exception</code>メソッドを書くことで対応する.</p>

<h2>まとめ</h2>

<p>ApplicationControllerで<code>Api::ErrorHandlers</code>を定義し, <code>rescue_exception</code>で例外処理することで, 開発速度が上がって良さそうだという個人的なエラー処理のまとめを書いてみた.</p>

<h2>追記</h2>

<p><a href="https://twitter.com/r7kamura">@r7kamura</a>さんに, 以下のリプライを頂いて</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yucchiy_">@yucchiy_</a> Rack middlewareの中で例外発生したらどうしますか</p>&mdash; いもり手 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/506088448566915072">2014, 8月 31</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yucchiy_">@yucchiy_</a> 例えばありがちな問題として、RailsにContent-Type: application/jsonを指定しながら誤ったJSONを送ると、パース部分はRack middlewareで実装されているので、例外が発生して500が返ります (400とかにしたい)</p>&mdash; いもり手 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/506094476809367552">2014, 8月 31</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>確かに, <strong>Rack middlewareのこととか全く考慮できてなくてダメダメ</strong>って感じだった.</p>

<p>そして起きたら<a href="http://qiita.com/r7kamura/items/2e88adbdd1782277b2e7">RailsでAPIをつくるときのエラー処理</a>っていうすごい知見がまとめられていた.</p>
]]></content>
  </entry>
  
</feed>
