<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: docker | Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/blog/categories/docker/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2015-01-22T23:30:50+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Laravel5をDockerで動かす]]></title>
    <link href="http://blog.yucchiy.com/2015/01/16/dockerized-laravel5/"/>
    <updated>2015-01-16T09:00:00+09:00</updated>
    <id>http://blog.yucchiy.com/2015/01/16/dockerized-laravel5</id>
    <content type="html"><![CDATA[<p>Laravel5で構築したアプリケーションの開発環境をDocker化するための方法を紹介する.</p>

<p>サンプルアプリケーションは<a href="https://github.com/yucchiy/dockerized-laravel5">こちら</a>で確認できる.</p>

<h2>準備</h2>

<p>以下の環境でLaravel5が動作するように, 環境を構築する.</p>

<ul>
<li>OS

<ul>
<li>Ubuntu 14.04</li>
</ul></li>
<li>ミドルウェア

<ul>
<li>Nginx</li>
<li>php-fpm 5.5</li>
<li>MySQL 5.5</li>
</ul></li>
</ul>

<h3>Laravel5のインストール</h3>

<p>まず, laravel5をインストールする. インストールにはcomposerを用いる. create-projectの時に, <code>dev-develop</code>を指定するとインストールできる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">mkdir dockerized-laravel5
cd dockerized-laravel5
composer create-project laravel/laravel application dev-develop
</code></pre></div>
<h2>PHPコンテナ</h2>

<p>nginx+php-fpmな環境で, laravelが動作するようにDockerfileを記述する.</p>

<p>Dockerでは, １コンテナ１プロセスにするのが好ましいが, 今回はnginxとphp-fpmを１コンテナで動かすために, <code>supervisord</code>をもちいる.</p>

<p>Dockerfileは以下のとおり.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">FROM ubuntu:14.04

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update

RUN apt-get install -yq --force-yes build-essential wget curl git ssh nginx nodejs-legacy npm mysql-client supervisor

RUN apt-get install -yq --force-yes  php5-cli php5 php5-fpm php5-mysql php5-curl php5-mcrypt php5-memcached &amp;&amp; \
    apt-get clean &amp;&amp; \
    rm -rf /var/lib/apt/lists/*

RUN php5enmod mcrypt

RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

RUN mkdir -p /app
WORKDIR /app

ADD ./application/database /app/database
ADD ./application/tests /app/tests
ADD ./application/composer.json /app/composer.json
ADD ./application/composer.lock /app/composer.lock
RUN composer install --no-scripts

ADD ./application /app
RUN php artisan clear-compiled
RUN php artisan optimize

RUN usermod -u 1000 www-data
RUN groupmod -g 1000 www-data

RUN chown -R www-data:www-data /app

RUN echo &quot;daemon off;&quot; &gt;&gt; /etc/nginx/nginx.conf
ADD docker/nginx-site.conf /etc/nginx/sites-available/default

ADD docker/supervisord.conf /etc/supervisord.conf

EXPOSE 80

CMD [&quot;/usr/bin/supervisord&quot;, &quot;-n&quot;, &quot;-c&quot;, &quot;/etc/supervisord.conf&quot;]
</code></pre></div>
<p>supervisord.conf</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">[unix_http_server]
file=/tmp/supervisor.sock

[supervisord]
logfile=/tmp/supervisord.log
pidfile=/tmp/supervisord.pid
nodaemon=false

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket

[program:php5-fpm]
command=/usr/sbin/php5-fpm -c /etc/php5/fpm --nodaemonize

[program:nginx]
command=/usr/sbin/nginx
</code></pre></div>
<p>このDockerfileのポイントについて説明する.</p>

<h3>composer.jsonを先にADDする</h3>

<p><code>ADD ./application /app</code>を行ったあとに<code>RUN composer install</code>とすると, <code>composer.json</code>の変更の有無にかかわらず, <strong><code>./application</code>内のどれかのファイルが変更されるごとに</strong> <code>composer install</code>が走る.
そこで, 先に<code>ADD ./application/composer.json /app/composer.json</code>と<code>RUN composer install</code>を行って, その後に<code>/application</code>を<code>ADD</code>することで, <code>composer.json</code>に変更がない場合は, その行がキャッシュされる.
これは, <a href="http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/">RubyのBundlerで紹介されているテクニック</a>をそのまま用いている.</p>

<p>ただし, composerの場合はそのままではうまくいかない. 問題は２つある.</p>

<ul>
<li><code>composer.json</code>の<code>autoload</code>に指定された<code>classmap</code>に対応するクラスは, <code>composer install</code>時に存在する必要がある.</li>
<li><code>composer install</code>後に, <code>composer.json</code>内の<code>scripts</code>に記述された処理が実行される.</li>
</ul>

<p>この対処方法について述べる.</p>

<h4>composerのautoloadに対応する</h4>

<p>まず, <code>composer.json</code>のautoloadに対応する. といっても, <code>composer install</code>時にautoloadが必要とするクラスが存在するだけでOKなので,
<code>application</code>内の, <strong><code>database</code>と<code>tests</code>ディレクトリをADD</strong>すれば良い.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">ADD ./application/database /app/database
ADD ./application/tests /app/tests
</code></pre></div>
<h4>composerのscriptsに対応する</h4>

<p>comopserは, 実行後に特定の処理を実行するためのフックが存在する. 具体的には<code>composer.json</code>内の<code>scripts</code>の項目の処理が実行される.</p>

<p>laravelでは, <code>composer install</code>後に, 以下の処理が実行される.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">php artisan clear-compiled
php artisan optimize
</code></pre></div>
<p><code>artisan</code>は, laravelのコマンドラインツールだが, これは<strong>laravelのアプリケーションディレクトリが存在しないと実行できない</strong>.
上記のテクニックでは, <code>composer install</code>時には<code>./application</code>内のすべてのファイルが存在しないため, <code>artisan</code>が正常に実行できずにエラーとなる.</p>

<p>この問題は, <code>composer install</code>実行後に, <code>scripts</code>に記述された処理を行わず, <strong>laravelのアプリケーションディレクトリを追加後に, <code>scripts</code>の処理を行う</strong>ことで対処できる.</p>

<p>具体的には, <code>composer install</code>を<code>--no-scripts</code>付きで実行し, <code>./application</code>をADDした後に, scriptsの項目の処理を実行する.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">RUN composer install --no-scripts

ADD ./application /app
RUN php artisan clear-compiled
RUN php artisan optimize
</code></pre></div>
<h3>.dockerignore</h3>

<p>Dockerfileとは直接は関係ないが, Dockerコンテナに含める必要のないファイルやディレクトリは, <code>.dockerignore</code>に記述することで, ADDやCOPYの対象から外れる.</p>

<p><code>.git</code>などは省いておくのと, laravelアプリケーションディレクトリ内の, <strong><code>vendor</code>と<code>composer.lock</code>も対象から省いて</strong>おかないと, Dockerコンテナ側でビルドした内容と, Dockerホスト側のディレクトリには差異が生じて, アプリケーションが動かない可能性がある.</p>

<h2>MySQLコンテナ</h2>

<p><a href="http://blog.yucchiy.com/2014/12/30/rails-docker-fig/">この記事</a>と同様に, Docker Hub公式の<a href="https://registry.hub.docker.com/_/mysql/">https://registry.hub.docker.com/_/mysql/</a>を用いる.</p>

<p><code>dockerized-laravel5</code>直下に<code>fig.xml</code>を用意し, 以下のように記述する.</p>

<p>環境変数を<code>environment:</code>に設定することで, MySQLの設定を変更することができる. </p>

<p>また, <code>my.cnf</code>などの設定を変更したい場合は, Dockerコンテナ内の<code>/etc/mysql</code>に, <strong>ローカルのディレクトリをマウントする</strong>ことで設定を置き換える方法もある(<code>/path/to/mysql:/etc/mysql</code>をvolumesに追記する).</p>

<h2>fig.yml</h2>

<p>以上のDockerfileからPHPコンテナを立ち上げるためのFigの設定を示す. <code>dockerized-laravel5</code>ディレクトリ直下に, 以下の様な内容の<code>fig.yml</code>を設置する.</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql:5.5</span>
  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD=himitsunopassword</span>
  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="s">&quot;3306&quot;</span>
  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/var/lib/mysql</span>
<span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="s">&quot;8080:80&quot;</span>
  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./application:/app</span>
  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db</span>
</code></pre></div>
<p>開発用途で利用するために, <code>volumes</code>項目に, <code>./application:/app</code>と記述する. こうすることで, ローカルでファイルを編集した内容が即座にDockerコンテナ内に反映される.</p>

<h3>PHPコンテナとMySQLコンテナのリンクと設定</h3>

<p>上記の設定では, Dockerのlink機能を用いて, PHPコンテナからMySQLコンテナ内のデータベースを利用できるようになっている.</p>

<p>アプリケーションからMySQLコンテナのDBに接続するための設定は, 環境変数を経由して取得できる.</p>

<p>環境変数の一覧は, 以下のように確認できる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ docker exec -it dockerizedlaravel5_web_1 env

DB_1_PORT_3306_TCP_ADDR=172.17.0.13
DB_1_PORT_3306_TCP_PORT=3306
DB_1_NAME=/dockerizedlaravel5_web_1/db_1
DB_1_ENV_MYSQL_ROOT_PASSWORD=himitsunopassword
</code></pre></div>
<p>laravelのデータベースの設定は, <code>env</code>関数を利用して行う.</p>
<div class="highlight"><pre><code class="language-php" data-lang="php"><span class="x">    &#39;mysql&#39; =&gt; [</span>
<span class="x">        &#39;driver&#39;    =&gt; &#39;mysql&#39;,</span>
<span class="x">        &#39;host&#39;      =&gt; env(&#39;DB_1_PORT_3306_TCP_ADDR&#39;, &#39;localhost&#39;),</span>
<span class="x">        &#39;database&#39;  =&gt; env(&#39;DB_DATABASE&#39;, &#39;forge&#39;),</span>
<span class="x">        &#39;username&#39;  =&gt; env(&#39;DB_USERNAME&#39;, &#39;root&#39;),</span>
<span class="x">        &#39;password&#39;  =&gt; env(&#39;DB_1_ENV_MYSQL_ROOT_PASSWORD&#39;, &#39;&#39;),</span>
<span class="x">        &#39;charset&#39;   =&gt; &#39;utf8&#39;,</span>
<span class="x">        &#39;collation&#39; =&gt; &#39;utf8_unicode_ci&#39;,</span>
<span class="x">        &#39;prefix&#39;    =&gt; &#39;&#39;,</span>
<span class="x">        &#39;strict&#39;    =&gt; false,</span>
<span class="x">    ],</span>
</code></pre></div>
<h2>開発環境として利用する</h2>

<p>figで管理しているコンテナの状態は, <code>fig ps</code>で確認できる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ fig ps
          Name                        Command               State             Ports
--------------------------------------------------------------------------------------------
dockerizedlaravel5_db_1    /entrypoint.sh mysqld            Exit 0   0.0.0.0:49153-&gt;3306/tcp
dockerizedlaravel5_web_1   /usr/bin/supervisord -n -c ...   Exit 0
</code></pre></div>
<p>起動は, <code>fig up</code>で行う.
<code>
$ fig up
Recreating dockerizedlaravel5_db_1...
Recreating dockerizedlaravel5_web_1...
Attaching to dockerizedlaravel5_db_1, dockerizedlaravel5_web_1
</code></p>

<p>起動中のコンテナでコマンドを実行するには<code>docker exec</code>を利用する.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ docker exec dockerizedlaravel5_web_1 ./artisan route:list
+--------+--------------------------------+-------------------------------------------------------+------+------------------------------------------------------------+------------+
| Domain | Method                         | URI                                                   | Name | Action                                                     | Middleware |
+--------+--------------------------------+-------------------------------------------------------+------+------------------------------------------------------------+------------+
|        | GET|HEAD                       | /                                                     |      | App\Http\Controllers\WelcomeController@index               |            |
|        | GET|HEAD                       | home                                                  |      | App\Http\Controllers\HomeController@index                  |            |
|        | GET|HEAD                       | auth/register/{one?}/{two?}/{three?}/{four?}/{five?}  |      | App\Http\Controllers\Auth\AuthController@getRegister       |            |
|        | POST                           | auth/register/{one?}/{two?}/{three?}/{four?}/{five?}  |      | App\Http\Controllers\Auth\AuthController@postRegister      |            |
|        | GET|HEAD                       | auth/login/{one?}/{two?}/{three?}/{four?}/{five?}     |      | App\Http\Controllers\Auth\AuthController@getLogin          |            |
|        | POST                           | auth/login/{one?}/{two?}/{three?}/{four?}/{five?}     |      | App\Http\Controllers\Auth\AuthController@postLogin         |            |
|        | GET|HEAD                       | auth/logout/{one?}/{two?}/{three?}/{four?}/{five?}    |      | App\Http\Controllers\Auth\AuthController@getLogout         |            |
|        | GET|HEAD|POST|PUT|PATCH|DELETE | auth/{_missing}                                       |      | App\Http\Controllers\Auth\AuthController@missingMethod     |            |
|        | GET|HEAD                       | password/email/{one?}/{two?}/{three?}/{four?}/{five?} |      | App\Http\Controllers\Auth\PasswordController@getEmail      |            |
|        | POST                           | password/email/{one?}/{two?}/{three?}/{four?}/{five?} |      | App\Http\Controllers\Auth\PasswordController@postEmail     |            |
|        | GET|HEAD                       | password/reset/{one?}/{two?}/{three?}/{four?}/{five?} |      | App\Http\Controllers\Auth\PasswordController@getReset      |            |
|        | POST                           | password/reset/{one?}/{two?}/{three?}/{four?}/{five?} |      | App\Http\Controllers\Auth\PasswordController@postReset     |            |
|        | GET|HEAD|POST|PUT|PATCH|DELETE | password/{_missing}                                   |      | App\Http\Controllers\Auth\PasswordController@missingMethod |            |
+--------+--------------------------------+-------------------------------------------------------+------+------------------------------------------------------------+------------+
</code></pre></div>
<p>また, コンテナ内にログインしたい場合は, <code>docker exec</code>で, <code>/bin/bash</code>などを実行する.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ docker exec -it dockerizedlaravel5_web_1 /bin/bash
root@c489f074bb66:/app# ls
app  artisan  bootstrap  composer.json  composer.lock  config  database  gulpfile.js  package.json  phpspec.yml  phpunit.xml  public  readme.md  resources  storage  tests  vendor
</code></pre></div>
<h2>まとめ</h2>

<p>LaravelをDockerで動かすための方法を紹介した.</p>

<p>また <a href="http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/">このテクニック</a>をcomposerに応用するためのテクニックをいくつか示した.</p>

<p>次に, 用意したDockerfileを用いて, テスト・CI・デプロイについて紹介していきたい.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[FigでRailsの開発環境を構築する]]></title>
    <link href="http://blog.yucchiy.com/2014/12/30/rails-docker-fig/"/>
    <updated>2014-12-30T13:27:47+09:00</updated>
    <id>http://blog.yucchiy.com/2014/12/30/rails-docker-fig</id>
    <content type="html"><![CDATA[<h2>はじめに</h2>

<p>個人で運用しているサービスをGKEにのせるついでに, 開発環境もDockerで統一しようと思い, FigでRailsの開発環境を構築したときのメモ.
基本的には, <a href="http://yuuki.hatenablog.com/entry/next-is-docker">Perlはもう古い、これからはDocker</a> のRails版である.</p>

<p>以下の環境で動作確認を行った.</p>

<ul>
<li>OS・パッケージ管理

<ul>
<li>Mac OSX Yosemite 10.10.1</li>
<li>Homebrew 0.9.5</li>
</ul></li>
<li>ソフトウェア

<ul>
<li>Docker 1.4.1</li>
<li>Boot2docker 1.4.1</li>
<li>Fig 1.0.1</li>
</ul></li>
</ul>

<p>今回はサンプルに, <a href="http://railstutorial.jp/">Ruby on Rails Tutorial</a> のサンプルソースを用いた. ただし, データベースの設定の都合,
<a href="https://github.com/yucchiy/sample_app_rails_4">いくつか変更を加えたもの</a>を用いた.</p>

<p>サンプルコードは, <a href="https://github.com/yucchiy/dockerized-rails-app">https://github.com/yucchiy/dockerized-rails-app</a> より確認できる.</p>

<h2>準備</h2>

<p>Railsアプリを開発するときにRedisやMySQLなどのミドルウェアが必要になった時, Railsアプリケーションのはいったコンテナに
ミドルウェアを導入しないほうが良い. これは, Dockerでは<a href="http://yuuki.hatenablog.com/entry/next-is-docker">1コンテナ1デーモンを前提に</a>していることなどがあげられる.</p>

<p>しかし, 複数コンテナになると, <strong>コンテナ間のリンクなどの管理が面倒</strong>になるので, Figを用いる.</p>

<h3>ベースとなるRubyのコンテナイメージを作成</h3>

<p>まず, dockerでRailsの実行環境を構築する. 上記のサンプルを動作させるには, ruby 2.0.0 の実行環境が必要である.
Ubuntu14.04上でそのような環境を構築するために, 以下の<code>Dockerfile</code>を用意し, ベースとなるイメージを用意する.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">FROM ubuntu:14.04
ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update &amp;&amp; \
    apt-get install -yq --force-yes build-essential wget curl git ssh

RUN apt-get install -yq --force-yes zlib1g-dev libssl-dev libreadline-dev libyaml-dev libxml2-dev libxslt-dev &amp;&amp; \
    apt-get clean

RUN git clone https://github.com/sstephenson/rbenv.git /root/.rbenv
RUN git clone https://github.com/sstephenson/ruby-build.git /root/.rbenv/plugins/ruby-build
RUN /root/.rbenv/plugins/ruby-build/install.sh
ENV PATH /root/.rbenv/bin:$PATH
RUN echo &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt; /etc/profile.d/rbenv.sh # or /etc/profile
RUN echo &#39;eval &quot;$(rbenv init -)&quot;&#39; &gt;&gt; .bashrc

ENV CONFIGURE_OPTS --disable-install-doc
ENV RUBY_VERSION 2.0.0-p598

RUN rbenv install $RUBY_VERSION
RUN echo &#39;gem: --no-rdoc --no-ri&#39; &gt;&gt; /.gemrc
RUN bash -l -c &#39;rbenv global $RUBY_VERSION; gem install bundler;&#39;
</code></pre></div>
<p>以下のコマンドでビルドを行う.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ docker build --tag=yucchiy/ruby:2.0.0 .
</code></pre></div>
<p>このような用途のイメージは使いまわしやすいので, 上記のようにして, イメージを分割しておくと良い(更にいうと ベースとなるOSに
gitやsshといった, どこでも使いそうなパッケージをインストールしたベースパッケージを用意しておくとGood).
この時, <a href="https://github.com/y-uuki/dockerfiles/blob/master/perl/5.20.1/Dockerfile">イメージサイズを小さくする工夫しておく</a>
と, シュッとしてなにかと便利です.</p>

<p>(余談だが, 特にMySQLなど, サーバーとクライアントで実行するコマンドが異なったり, 実行するコマンドが長くなると,
<a href="https://github.com/yucchiy/dockerfiles/blob/master/mysql/Makefile">Makefileでタスクを管理</a>すると, 何かと便利である.)</p>

<h3>アプリケーションを実行するためのコンテナの作成</h3>

<p>上記のRubyコンテナを用いて, サンプルの実行環境を構築する. 具体的には以下の<code>Dockerfile</code>を用意する.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">FROM yucchiy/ruby:2.0.0

RUN \
    apt-get install -yq --force-yes mysql-client-5.5 libmysqlclient-dev libssl-dev nodejs &amp;&amp; \
    apt-get clean

RUN mkdir -p /app
WORKDIR /app
COPY ./sample_app_rails_4/Gemfile /app/Gemfile
RUN bash -l -c &#39;bundle install&#39;

COPY ./sample_app_rails_4 /app

EXPOSE 3000
CMD bash -l -c &#39;bundle exec rails s&#39;
</code></pre></div>
<p>ポイントは<code>COPY ./sample_app_rails_4/Gemfile /app/Gemfile</code>で, 先に<code>Gemfile</code>をCOPYすることで,
<code>Gemfile</code>に変更がない時は, <code>bundle install</code>のフルインストールを行わない
<a href="http://ilikestuffblog.com/2014/01/06/how-to-skip-bundle-install-when-deploying-a-rails-app-to-docker/">テクニック</a>を利用している.</p>

<h2>Figによる複数コンテナの管理</h2>

<p>Figを用いて, 複数コンテナの管理をする. 具体的には<code>fig.yml</code>を用意する. 以下に, サンプルソースを, MySQLを用いて
実行するための<code>fig.yml</code>の例を示す.</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">db</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">image</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql:5.6</span>
  <span class="l-Scalar-Plain">environment</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">MYSQL_ROOT_PASSWORD=himitsunopassword</span>
  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="s">&quot;3306&quot;</span>
  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">/storage/mysql:/var/lib/mysql</span>
<span class="l-Scalar-Plain">web</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">build</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">.</span>
  <span class="l-Scalar-Plain">command</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">bash -l -c &#39;bundle exec rails server --port=3000 --binding=0.0.0.0&#39;</span>
  <span class="l-Scalar-Plain">ports</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="s">&quot;3000:3000&quot;</span>
  <span class="l-Scalar-Plain">volumes</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">./sample_app_rails_4:/app</span>
  <span class="l-Scalar-Plain">links</span><span class="p-Indicator">:</span>
    <span class="p-Indicator">-</span> <span class="l-Scalar-Plain">db</span>
</code></pre></div>
<p><a href="http://www.fig.sh/yml.html">公式ドキュメント</a>と, <a href="http://www.fig.sh/rails.html">公式のRails環境の構築方法</a>を参考にした.</p>

<p>今回, MySQLのコンテナとして, <a href="https://registry.hub.docker.com/_/mysql/">https://registry.hub.docker.com/_/mysql/</a>を用いた.
設定を変更するにはいくつか方法があるが, <code>/etc/mysql</code>が<code>VOLUME</code>に登録されているらしく, 
複数の設定を変更したいときは, <code>/home/my-etcmysql:/etc/mysql</code>という感じで<code>/etc/mysql</code>に自分のディレクトリをマウントすることで,
ごっそり設定ファイルを入れ替えることができる.</p>

<p>次に, 以下のコマンドでコンテナのビルドを行う.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ fig build
</code></pre></div>
<h3>データベースの設定</h3>

<p>figで管理しているデータベースの設定は, <a href="https://docs.docker.com/userguide/dockerlinks/">環境変数を介して取得できる</a>.
アプリケーションのコンテナに設定されている環境変数は, 以下のコマンドで確認できる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ fig run web env
</code></pre></div>
<p>これを用いてデータベースの接続先を設定するには, 以下のように記述する.</p>
<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="l-Scalar-Plain">development</span><span class="p-Indicator">:</span>
  <span class="l-Scalar-Plain">adapter</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">mysql2</span>
  <span class="l-Scalar-Plain">encoding</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">utf8</span>
  <span class="l-Scalar-Plain">database</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">sample_app_rails_4_development</span>
  <span class="l-Scalar-Plain">user</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">root</span>
  <span class="l-Scalar-Plain">password</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;DB_ENV_MYSQL_ROOT_PASSWORD&#39;] %&gt;</span>
  <span class="l-Scalar-Plain">host</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;DB_PORT_3306_TCP_ADDR&#39;] %&gt;</span>
  <span class="l-Scalar-Plain">port</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">&lt;%= ENV[&#39;DB_PORT_3306_TCP_PORT&#39;] %&gt;</span>
  <span class="l-Scalar-Plain">timeout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">5000</span>
</code></pre></div>
<h3>データベースの作成・マイグレーション</h3>

<p><code>fig run</code>を用いて, 以下のように行う.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ fig run web bash -l -c &#39;bundle exec rake db:create db:migrate&#39;
</code></pre></div>
<h3>Figによるコンテナの起動</h3>

<p><code>fig up</code>で, 管理しているコンテナをまとめて起動できる. また, 個別に起動をすることも可能である.</p>

<h2>まとめ</h2>

<p>Figを用いて, 複数コンテナを管理する方法を紹介した. 今後は, 実際に開発する際のノウハウ(テストなど)や, 本番環境での運用についてまとめたい.</p>

<h2>参考(環境構築)</h2>

<h3>Homebrewによるツールのインストール</h3>

<p>今回想定する環境では, 今回利用するDocker・Boot2docker・Figは, いずれもHomebrewでインストールできる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ brew install docker boot2docker fig
</code></pre></div>
<h3>Boot2dockerのセットアップ</h3>

<p>boot2dockerを利用するためには, まず初期化を行う.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ boot2docker init
</code></pre></div>
<p>次に, boot2dockerに環境変数を設定する. 以下のコマンドを実行することで, 一括で設定を行うことができる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$(boot2docker initshell)
</code></pre></div>
<p>以下を実行することで出力される設定をそのまま<code>.bashrc</code>に書いても良いが,
<a href="http://qiita.com/deeeet/items/518704402e9bc5995ecc">このコマンドをシェル起動時都度実行する</a>ほうが良い.</p>

<p>設定後は, 以下のコマンドでboot2dockerを操作できる.</p>
<div class="highlight"><pre><code class="language-text" data-lang="text">$ boot2docker start # 起動
$ boot2docker stop  # 終了
</code></pre></div>
<h3>参考ページ</h3>

<ul>
<li><a href="http://yuuki.hatenablog.com/entry/next-is-docker">Perlはもう古い、これからはDocker</a></li>
<li><a href="http://qiita.com/cieux1@github/items/b2294f8adddefb357a37">【翻訳】DockerとVagrantによるRails開発環境</a></li>
<li><a href="http://deeeet.com/writing/2014/12/01/docker-link-pattern/">Dockerコンテナ接続パターン (2014年冬)</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
