<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 勉強会 | Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/blog/categories/mian-qiang-hui/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2014-12-31T09:42:15+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[京都 Android 勉強会]]></title>
    <link href="http://blog.yucchiy.com/2014/08/23/kyoto-android-201408/"/>
    <updated>2014-08-23T15:02:20+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/23/kyoto-android-201408</id>
    <content type="html"><![CDATA[<p>京都Android勉強会に参加したときのメモを, 参加記としてブログに公開.</p>

<h2>Androidとアカウント @cockscomb さん</h2>

<p>AccountManagerがひたすら便利だという話.</p>

<h3>AccountManager</h3>

<ul>
<li>Androidのアカウント管理システム</li>
<li>認証トークンの取得を抽象化

<ul>
<li>iOSにないおもしろい機能</li>
</ul></li>
<li>アプリ間での共有</li>
<li>認証トークンを暗黙的に取得

<ul>
<li>無効化されるまでキャッシュ・自動的に取得</li>
</ul></li>
</ul>

<h3>使い方</h3>

<ul>
<li>AndroidManifest.xmlに記述

<ul>
<li>account-authenticator という項目を追加</li>
</ul></li>
<li><code>Service</code>を継承した, <code>AuthenticationService</code>

<ul>
<li>コピペで一瞬で書ける</li>
</ul></li>
<li><code>AbstractAccountAuthenticaticator</code>を継承したクラスを作成

<ul>
<li><code>addAccount</code>, <code>getAuthToken</code>メソッドが重要</li>
</ul></li>
</ul>

<p>サンプルコードは, <a href="https://github.com/android/platform_development/tree/master/samples/SampleSyncAdapter">SampleSyncAdapter</a>にあるのでこれを見たらよい.</p>

<h3>VolleyとAccountManagerの連携</h3>

<ul>
<li>自動的に非同期に呼び出し</li>
<li>認証失敗時にはAuthFailureError</li>
<li>AuthenticatorをMockしてテストが可能</li>
</ul>

<h2>クックパッドの業務の話 @rejasupotaro さん</h2>

<p>一年で本体アプリにコミットする人が急増したので, いかにしてスケールするかみたいな発表.</p>

<h3>開発環境</h3>

<ul>
<li>Android Studio + Gradle</li>
<li>Groovyで自動化

<ul>
<li>リリースエンジニアリングをコマンド一つでやったりできるっぽい</li>
</ul></li>
<li>Android Frontier</li>
</ul>

<h3>イテレーション</h3>

<ul>
<li>二週間に1度リリース. タスクはすべてGithubのissueで管理.

<ul>
<li>だいたい100個くらい消化してる</li>
</ul></li>
</ul>

<h3>レビュー</h3>

<ul>
<li>レビューがボトルネック</li>
<li>レビュータイムを設ける

<ul>
<li>10時に手付かずのPRがチャットに流れる</li>
</ul></li>
<li>レビュー系はBotでいろいろ自動化

<ul>
<li>過去の経験からレビューにチェックリストをつける. 障害系のチェックに便利</li>
</ul></li>
</ul>

<h4>UIテスト</h4>

<ul>
<li>自動化はコストに見合わなくて断念</li>
<li>iOSは<a href="http://appium.io/">Appium</a>でシナリオが100個ある</li>
</ul>

<h4>ドックフーディング</h4>

<ul>
<li>PRをマージして, Jenkinsがテストして, ベータ版をDeployGateでリリース.

<ul>
<li>ただあんまりうまく行ってない</li>
</ul></li>
</ul>

<h3>エラー監視</h3>

<ul>
<li>クラッシュリティクスでクラッシュ数と推移とクラッシュ確認(Crash Free Usersを99.n%以上にする)</li>
</ul>

<h3>リリースしすぎ問題</h3>

<ul>
<li>リリースし過ぎると, 毎回ダウンロードが入って不便.

<ul>
<li>レビューでディスられるっぽい</li>
</ul></li>
<li>LINEとFacebookは一ヶ月サイクル(?)</li>
</ul>

<h2>XML BY DESIGN デザイナがコードを書くとちょっと良いこと @yulily100 さん</h2>

<p>XMLをデザイナが書くといろいろ開発が幸せになる話.</p>

<p><script async="true" class="speakerdeck-embed" data-id="dd195b300fbd0132c8492abbbf00bf60" src="//speakerdeck.com/assets/embed.js"> </script></p>

<h3>UIをつくる</h3>

<ul>
<li>ペーパープロトタイピング

<ul>
<li>プログラマとも相談する. 実装とかの兼ね合い</li>
</ul></li>
<li>ユーザビリティテスト</li>
<li>プログラマと一緒にやって, 前提を共有する</li>
</ul>

<h3>コードを書く</h3>

<ul>
<li>Githubを使って, PRベースで進める

<ul>
<li>細かい相談をコメントで</li>
<li>スクショはれるし便利</li>
</ul></li>
<li>出し分けが必要になった時点で, pushしてエンジニアにやってもらう.</li>
<li>全部終わったらレビューをお願いする. 良かったらマージ.</li>
</ul>

<h3>なにが良いか</h3>

<ul>
<li>動くものを触りながらデザインすることができる

<ul>
<li>動かないとわからないこともある</li>
</ul></li>
<li>カンプを作らなくてもいいから, 無駄な時間を削減</li>
<li>エンジニアとワイワイ出来る</li>
</ul>

<h2>オブジェクト指向やめましょう @kis さん</h2>

<p>オブジェクト指向は, 語られるコンテキストがバラバラで腐ったBuzzWord.</p>

<p>オブジェクト指向を使ったからといって, 良いコードを書けるわけではないのでそんな夢は捨ててちゃんと勉強しましょうという話.</p>

<h2>黒魔術 @_kaiinui さん</h2>

<p>Javaの黒魔術: Annotationについて</p>

<p><script async="true" class="speakerdeck-embed" data-id="45f2eb000cd301321e865e226fb19d76" src="//speakerdeck.com/assets/embed.js"> </script></p>

<h3>良さ</h3>

<ul>
<li>宣言的</li>
<li>コードと宣言を分離できる</li>
<li>ミスを防止できる</li>
</ul>

<h3>作り方</h3>

<p>AspectJを使うと作れる</p>

<h3>ライブラリ</h3>

<p>紹介されたライブラリ. <a href="https://github.com/JakeWharton/hugo">JakeWharton</a>さんは, Android Annotationのプロらしい.</p>

<ul>
<li><a href="https://github.com/JakeWharton/hugo">Hugo</a></li>
<li><a href="https://github.com/frankiesardo/icepick">Icepick</a></li>
<li><a href="https://github.com/square/retrofit">Retrofit</a></li>
<li><a href="https://github.com/JakeWharton/butterknife">Butter knife</a></li>
</ul>

<h2>Android アプリ開発における Gradle ビルドシステム @nobuoka さん</h2>

<p>Gradleについての知見.</p>

<p><iframe src="http://www.slideshare.net/slideshow/embed_code/38432268 " width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="margin-top: 0px !important; border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> </p>

<h3>GradleとAndroid アプリ開発</h3>

<h4>Gradleとは</h4>

<ul>
<li>ビルドシステム</li>
<li>ビルド設定はGroovyによるDSL</li>
<li>Mavenによる依存関係が組み込まれている</li>
<li>最近は C/C++/Objective-Cもサポートされ始めた</li>
</ul>

<h4>利点と欠点</h4>

<ul>
<li>自由度が高い(Groovyの処理を書ける)</li>
<li>Maven リポジトリが使える</li>
<li>Groovyになれるまで難しい

<ul>
<li>デバッグとか難しい</li>
</ul></li>
</ul>

<h3>GradleやAndroid Gradle pluginの便利機能</h3>

<ul>
<li>デバッグ時だけ機能を変化させることができる</li>
<li>Build Variants

<ul>
<li>Build types</li>
<li>Product Flavors: 同じアプリから複数アプリ</li>
</ul></li>
<li>BuildConfigのプロパティをビルド時に決定</li>
</ul>

<h3>Gradleプラグインの作り方</h3>

<p>作り方も使い方も簡単</p>

<h4>プラグインの利点</h4>

<ul>
<li>再利用可能</li>
<li>Groovyでもかけるし, JavaやScalaでも書ける</li>
</ul>

<h2>感想とか</h2>

<p>久々に勉強会に参加したけど, 自分の知らない発見とかあってよかった.</p>

<p>個人的には, <a href="https://twitter.com/rejasupotaro">@rejasupotaro</a>さんの業務の話が面白かった. リリースし過ぎるとレビューでdisられるとか, なるほどアプリって大変だって思った.</p>

<p><a href="https://twitter.com/_kaiinui">@_kaiinui</a>さんのJava Annnotaion, 黒魔術だ〜全く便利じゃないって言っておられたけど普通に便利だなとおもった.</p>

<p>Android勉強会, 関西で定期的に開催されるらしいし次も是非参加したい. 今度は是非<a href="https://twitter.com/yucchiy_/status/503061258065547264">この夏もっとおしゃれなTシャツ</a>をゲットしたい.</p>

<h2>参考資料</h2>

<ul>
<li><a href="http://yulily100.hatenablog.jp/entry/2014/08/27/112604">デザイナーがandroidのXMLコーディングをやる利点について発表しました - yulily100&#39;s blog</a></li>
<li><a href="http://vividcode.hatenablog.com/entry/study-meeting/kyoto-android-2014-08">発表資料: Android アプリ開発における Gradle ビルドシステム (京都 Android 勉強会 2014.08) - ひだまりソケットは壊れない</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
