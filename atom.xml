<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2014-08-11T19:15:54+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[Chrome Extension generatorを使ってChrome Extensionを開発する]]></title>
    <link href="http://blog.yucchiy.com/blog/2014/08/11/chrome-extension-yaoman/"/>
    <updated>2014-08-11T08:59:50+09:00</updated>
    <id>http://blog.yucchiy.com/blog/2014/08/11/chrome-extension-yaoman</id>
    <content type="html"><![CDATA[<p>Chrome Extensionの開発について今っぽくgruntとかbowerとか使って開発しようと思って調べていたら,
Yeomanに<a href="https://github.com/yeoman/generator-chrome-extension">generator-chrome-extension</a>というgeneratorがあって, これを使うとサクッとChrome Extension
のテンプレートが作れたので, メモ代わりにブログに書いてみた.</p>

<h2>インストール</h2>

<p>インストールする前に, 当然yaomanが必要なので, yaomanをインストールする. node.js, npmがインストールされていれば
以下のコマンドでyaomanをインストールする.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g yo mocha</span></code></pre></td></tr></table></div></figure>


<p><code>generator-chrome-extension</code>では, デフォルトのテストフレームワークとして<code>mocha</code>を採用しているので, ついでにインストールしておくと良い.
次に, <code>generator-chrome-extension</code>をインストールする. インストールは至って簡単で, 以下のコマンドでインストールする.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g generator-chrome-extension</span></code></pre></td></tr></table></div></figure>


<h2>使い方</h2>

<p>まず, アプリのひな形を作成する. yaomanのコマンドを用いて作成する.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir path-to-my-chrome-extension
</span><span class='line'>cd  path-to-my-chrome-extension
</span><span class='line'>yo chrome-extension</span></code></pre></td></tr></table></div></figure>


<p>この時, アプリ名や初期アプリの構成を聞かれるので, 必要に応じてチェックをいれる.</p>

<h3>ディレクトリ構成</h3>

<p>ひな形作成時にすべてのチェックを外すと, 概ね以下のディレクトリ構成となる.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Gruntfile.js
</span><span class='line'>├── app
</span><span class='line'>│   ├── _locales
</span><span class='line'>│   │   └── en
</span><span class='line'>│   │       └── messages.json
</span><span class='line'>│   ├── bower_components
</span><span class='line'>│   ├── images
</span><span class='line'>│   │   ├── icon-128.png
</span><span class='line'>│   │   ├── icon-16.png
</span><span class='line'>│   │   ├── icon-19.png
</span><span class='line'>│   │   └── icon-38.png
</span><span class='line'>│   ├── manifest.json
</span><span class='line'>│   ├── popup.html
</span><span class='line'>│   ├── scripts
</span><span class='line'>│   │   ├── background.coffee
</span><span class='line'>│   │   ├── background.js
</span><span class='line'>│   │   ├── chromereload.coffee
</span><span class='line'>│   │   ├── chromereload.js
</span><span class='line'>│   │   ├── popup.coffee
</span><span class='line'>│   │   └── popup.js
</span><span class='line'>│   └── styles
</span><span class='line'>│       └── main.scss
</span><span class='line'>├── bower.json
</span><span class='line'>├── dist
</span><span class='line'>│   ├── _locales
</span><span class='line'>│   │   └── en
</span><span class='line'>│   │       └── messages.json
</span><span class='line'>│   ├── images
</span><span class='line'>│   │   ├── icon-128.png
</span><span class='line'>│   │   ├── icon-16.png
</span><span class='line'>│   │   ├── icon-19.png
</span><span class='line'>│   │   └── icon-38.png
</span><span class='line'>│   ├── manifest.json
</span><span class='line'>│   ├── popup.html
</span><span class='line'>│   ├── scripts
</span><span class='line'>│   │   ├── background.js
</span><span class='line'>│   │   ├── popup.js
</span><span class='line'>│   │   └── vendor.js
</span><span class='line'>│   └── styles
</span><span class='line'>│       └── main.css
</span><span class='line'>├── package
</span><span class='line'>│   └── password generator-0.0.4.zip
</span><span class='line'>├─node_modules
</span><span class='line'>├── package.json
</span><span class='line'>└── test
</span><span class='line'>    ├── bower.json
</span><span class='line'>    ├── index.html
</span><span class='line'>    └── spec
</span><span class='line'>        └── test.js</span></code></pre></td></tr></table></div></figure>


<h3>Gruntタスク</h3>

<p>ひな形作成時に, 様々なタスクが追加されているが, 主に開発で利用するタスクを紹介する.</p>

<h4>debug</h4>

<p>debugタスクは<code>grunt-contrib-watch</code>を用いて, 各ファイルの変更を監視し,
bowerでインストールした外部ライブラリの自動ロード, SassやCoffeeScriptのコンパイル,
エクステンションのリロードまで自動で行ってくれる.
開発中はずっと起動しっぱなしになると思う.</p>

<p>また, <code>http://localhost:4000</code>に<code>/app</code>ディレクトリの内容を配信するローカルのサーバーが立ち上がるため,
そちらでデバッグすることもできる. (もちろんlivereloadも行ってくれる)</p>

<h4>build</h4>

<p>buildタスクは<code>/app</code>ディレクトリから, エクステンションをリリースするときに必要なzipの生成を行うタスク.
この時, 各種ファイルのコンパイルやjs・cssの結合と圧縮など, 静的ファイルの最適化は自動で行ってくれる.</p>

<p>生成されたzipファイルは<code>/package</code>に, <code>{appname}-{version}.zip</code>という名前で保存される.
ちなみにバージョンは, その時の<code>manifest.json</code>のバージョンに, ビルドバージョンがインクリメントされたものとなる(同時に<code>manifest.json</code>も更新される).</p>

<p>zip圧縮前のアプリは<code>/dist</code>に保存されている. リリース前には, 念の為にこちらのディレクトリをエクステンションとして読み込んで動作確認をした方がいいかもしれない.</p>

<h2>Tips</h2>

<p>エクステンションを開発していて気づいたTipsを上げていく.</p>

<h3>外部ライブラリの読み込み</h3>

<p>外部ライブラリの読み込みは, <code>bower</code>を通じて行う. 例えば<a href="http://underscorejs.org/">underscore.js</a>を利用したい場合は以下のようにする.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install --save underscore</span></code></pre></td></tr></table></div></figure>


<p>すると<code>/app</code>ディレクトリにライブラリがインストールされ, 同時にライブラリを自動でロードされる.
具体的には, <code>bower install</code>後に, <code>/app</code>ディレクトリ直下にあるHTMLファイルの, <code>&lt;!-- bower:css --&gt; &lt;!-- endbower --&gt;</code>, または<code>&lt;!-- bower:js --&gt; &lt;!-- endbower --&gt;</code>と記述された場所に追記が行われる.
なので自分でHTMLファイルを追加する際には, <code>&lt;!-- bower:css --&gt;</code>と<code>&lt;!-- bower:js --&gt;</code>を適切な箇所に記述しておく必要がある.
だいたいyaomanが作ったHTMLファイルを参考に(というかコピペ)すれば良い.</p>

<p>ちなみにこれは<code>grunt-bower-install</code>を用いてgruntが処理を行っている.</p>

<h3>HTMLファイルの手動追加</h3>

<p>HTMLファイルを<code>/app</code>内に作成したら, <code>Gruntfile.js</code>の<code>userminPrepare</code>タスクの<code>html</code>の配列に, 作成したHTMLファイルを追記しておく.
こうしないと, <code>/dist</code>ディレクトリにコピーが行われなく, パッケージ時にこまる.</p>

<h3>Chromeに読み込んだエクステンションのデバッグ</h3>

<p>Chromeに読み込んだエクステンションのコンソールは, 設定画面の<code>Extensions &gt; デバッグしたいエクステンション &gt; Inspect views</code>から確認できる.</p>

<h2>参考リンク</h2>

<ul>
<li><a href="https://developer.chrome.com/devtools/docs/integrating">DevTools Extensions API</a></li>
<li><a href="http://kazu69.net/blog/tec/1969">YeomanをつかったChrome extension開発のメモ</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubot+Herokuでbot入門+Slack連携]]></title>
    <link href="http://blog.yucchiy.com/blog/2014/07/17/tutorial-hubot-slack-heroku/"/>
    <updated>2014-07-17T22:49:05+09:00</updated>
    <id>http://blog.yucchiy.com/blog/2014/07/17/tutorial-hubot-slack-heroku</id>
    <content type="html"><![CDATA[<p>業務関係で少しHubotを触ったので, 備忘録代わりにブログに書いてみた.</p>

<h2>インストール</h2>

<p>以下の環境が必要になるので予めインストールする.</p>

<ul>
<li>Node.js, npm</li>
<li>CoffeeScript</li>
<li>Redis(データ永続化に必要. 必要に応じてインストールする)</li>
</ul>


<p>Macの場合は, HomeBrewでインストールするのが楽.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install node redis-server</span></code></pre></td></tr></table></div></figure>


<p><code>Hubot</code>は, npmからインストールできる.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g coffee-script hubot</span></code></pre></td></tr></table></div></figure>


<h2>Botを作成してみる</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hubot --create mybot
</span><span class='line'>cd mybot
</span><span class='line'>npm install --save</span></code></pre></td></tr></table></div></figure>


<h3>Gitでバージョン管理</h3>

<p>はじめから<code>.gitignore</code>が用意されているので, おもむろにInitial commit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd mybot
</span><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m "Initial commit."</span></code></pre></td></tr></table></div></figure>


<h3>動作確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./bin/hubot
</span><span class='line'>Hubot&gt; hubot hi
</span><span class='line'>Hubot&gt; hi
</span><span class='line'>Hubot&gt; exit</span></code></pre></td></tr></table></div></figure>


<h2>自作スクリプトを書く</h2>

<p><code>scripts</code>ディレクトリ以下にスクリプトを設置する.</p>

<h3>特定の文字列に反応してつぶやく</h3>

<p><code>robot.hear</code>を用いる. 第1引数に正規表現を, 第2引数に行いたい処理を関数で渡す.
この時関数に, <code>msg</code>オブジェクトが渡ってくるので, <code>msg.send</code>でBotを喋らせることができる.</p>

<p>以下, <code>hoge</code>とつぶやいたら<code>piyo</code>とつぶやくBotの例.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nv">util = </span><span class="nx">require</span> <span class="s">&#39;util&#39;</span><span class="err">↲</span>
</span><span class='line'><span class="err">↲</span>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span><span class="err">↲</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">hear</span> <span class="sr">/hoge/i</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span><span class="err">↲</span>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="s">&#39;piyo&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>特定の時間につぶやく(Cron)</h3>

<p>node-cronモジュールを用いると, 簡単に定期実行処理をHubotに行わせることができる.
node-cronはnpmからインストールできる.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">cron</span> <span class="o">--</span><span class="nx">save</span>
</span></code></pre></td></tr></table></div></figure>


<p>以下, 日本時間の8時に, <code>おはよう朝だYo</code>とつぶやくスクリプト例.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nv">cron = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;cron&#39;</span><span class="p">).</span><span class="nx">CronJob</span>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">enter</span> <span class="nf">-&gt;</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">cron</span>
</span><span class='line'>    <span class="nv">cronTime: </span><span class="s">&quot;0 0 8 * * *&quot;</span>
</span><span class='line'>    <span class="nv">start: </span><span class="kc">true</span>
</span><span class='line'>    <span class="nv">timeZone: </span><span class="s">&quot;Asia/Tokyo&quot;</span>
</span><span class='line'>    <span class="nv">onTick: </span><span class="nf">-&gt;</span>
</span><span class='line'>      <span class="nx">robot</span><span class="p">.</span><span class="nx">send</span> <span class="p">{</span><span class="nv">room: </span><span class="s">&quot;#hogechannel&quot;</span><span class="p">},</span> <span class="s">&quot;おはよう朝だYo&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>環境変数の受け取り方</h3>

<p><code>process.env</code>を使う</p>

<h2>BotをHerokuで運用する</h2>

<p>Hubotは普通, そこまでサーバーのスペックを要求しないので(?)運用するには
Herokuが気軽で良いと判断し, Herokuをホスティングサーバーとしてみた.</p>

<p>まずHerokuを利用するの必要なツールをbrewインストールする.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">brew</span> <span class="nx">install</span> <span class="nx">heroku</span><span class="o">-</span><span class="nx">toolbelt</span>
</span></code></pre></td></tr></table></div></figure>


<h4>HerokuにHubotをデプロイ</h4>

<p><code>git push</code>でデプロイを行う.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">heroku</span> <span class="nx">create</span> <span class="o">--</span><span class="nx">stack</span> <span class="nx">cedar</span>
</span><span class='line'><span class="nx">git</span> <span class="nx">push</span> <span class="nx">heroku</span> <span class="nx">master</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">addons</span><span class="o">:</span><span class="nx">add</span> <span class="nx">rediscloud</span> <span class="c1"># Heroku上でVerifyしていないとエラー</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">ps</span><span class="o">:</span><span class="nx">scale</span> <span class="nx">web</span><span class="o">=</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Herokuで運用してるHubotとSlackを連携</h4>

<p>まず, SlackのIntegrationsからHubot連携して, <code>HUBOT_SLACK_TOKEN</code>を控えておく.
次に, herokuコマンドで設定.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">heroku</span> <span class="nx">config</span><span class="o">:</span><span class="nx">add</span> <span class="nx">HUBOT_SLACK_TOKEN</span><span class="o">=</span><span class="nx">xxxx</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">config</span><span class="o">:</span><span class="nx">add</span> <span class="nx">HUBOT_SLACK_TEAM</span><span class="o">=</span><span class="nx">yucchiy</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">config</span><span class="o">:</span><span class="nx">add</span> <span class="nx">HUBOT_SLACK_BOTNAME</span><span class="o">=</span><span class="nx">yucchiy</span><span class="o">-</span><span class="nx">bot</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">config</span><span class="o">:</span><span class="nx">add</span> <span class="nx">HEROKU_URL</span><span class="o">=</span><span class="nx">http</span><span class="o">:/</span><span class="sr">/yucchiy.herokuapp.com/</span>
</span></code></pre></td></tr></table></div></figure>


<p>他にも, 監視チャンネルを制御する設定もある.</p>

<ul>
<li><code>HUBOT_SLACK_CHANNELMODE</code>

<ul>
<li>後述する, <code>HUBOT_SLACK_CHANNELS</code>と併用する. <code>whitelist</code>と<code>blacklist</code>が選択できる.</li>
</ul>
</li>
<li><code>HUBOT_SLACK_CHANNELMODE</code>

<ul>
<li>カンマ区切りでチャンネル名を指定する.</li>
<li><code>HUBOT_SLACK_CHANNELS</code>に<code>whiltelist</code>と指定すると, 指定したチャンネルのみを監視し, <code>blacklist</code>を指定すると, 指定したチャンネルは監視しないようになる</li>
</ul>
</li>
</ul>


<p>詳細は<a href="https://github.com/tinyspeck/hubot-slack">https://github.com/tinyspeck/hubot-slack</a>より確認できる.</p>

<p>次に, <code>Procfile</code>をslackのアダプタをロードするように変更する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nv">web: </span><span class="nx">bin</span><span class="o">/</span><span class="nx">hubot</span> <span class="o">--</span><span class="nx">adapter</span> <span class="nx">slack</span>
</span></code></pre></td></tr></table></div></figure>


<p>上記を設定の上, herokuのmasterブランチにデプロイすることで, slack連携が行われるようになる.</p>

<h2>参考URL</h2>

<ul>
<li><a href="http://hilott.hateblo.jp/entry/2012/07/09/004115">node.jsで環境変数を受け取る。herokuでの設定方法。</a></li>
<li><a href="http://sojiro14.github.io/blog/2014/04/19/irc-bot-by-hubot/">Hubotを使ったirc-bot作成メモ</a></li>
<li><a href="http://d.hatena.ne.jp/anatoo/20120204/1328368042">github社製ボットフレームワーク、hubotをIRCボットとして導入した話(修正あり</a></li>
<li><a href="http://nanapi.co.jp/blog/2014/06/04/slack_with_hubot/">Slack上のボットをHubotで作ってHerokuにデプロイしてみた</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでそこそこ真面目にSEO対策する]]></title>
    <link href="http://blog.yucchiy.com/blog/2014/06/28/rails-seo/"/>
    <updated>2014-06-28T19:07:49+09:00</updated>
    <id>http://blog.yucchiy.com/blog/2014/06/28/rails-seo</id>
    <content type="html"><![CDATA[<p>個人でRailsで開発しているサービスのSEOを少しまじめに調べたので,
ブログにもアウトプットしてみた. 基本, 有名そうなGemを拾って対応した.</p>

<!-- more -->


<h2>MetaTags</h2>

<p><a href="https://github.com/kpumuk/meta-tags">https://github.com/kpumuk/meta-tags</a></p>

<p>SEOに重要そうなメタタグの管理を行ってくれるgem. 基本的なメタタグ以外に,
OpenGraph, Twitter Cards, などのタグもサポートしてくれている.
もちろん独自のメタタグも導入できる.</p>

<p>基本的にREADMEに書かれているメタタグを仕込んでおけば大丈夫そう.</p>

<h3>使い方</h3>

<p>Bundleでインストールを行う. Gemfileに以下を記述する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;meta-tags&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に, メタタグを仕込みたいビューファイルに以下を記述する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">display_meta_tags</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><code>display_meta_tags</code>には引数が渡せて, デフォルトで埋め込むメタタグを設定できる.
ただし, <code>set_meta_tags</code>で設定するとそのメタタグは上書きされる.</p>

<p>例えば, <code>:site</code>などは全ページで共通のものを利用することが多いはずなので,
以下の様に設定しておくと毎回設定しなくて良くて便利.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">display_meta_tags</span><span class="p">({</span>
</span><span class='line'>  <span class="ss">:site</span> <span class="o">=&gt;</span> <span class="s1">&#39;HogePiyoSite&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:reverse</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p>メタタグを設定するには<code>set_meta_tags</code>をコントローラ内またはビューファイルで利用する.
例えばビューファイル内で設定するには以下のようにする.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">set_meta_tags</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;HogePiyoTitle&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<h3>設定しておくと良さそうなメタタグ</h3>

<p>この辺は, テストでちゃんと設定されているかチェックしておけば
リリース直前で慌てるなんてことがなくなっていいかもしれない.</p>

<ul>
<li>基本的なメタタグ

<ul>
<li>title (<code>:title</code>)</li>
<li>description (<code>:description</code>)</li>
<li>keywords (<code>:keywords</code>)</li>
<li>Canonical URL (<code>:canonical</code>)</li>
</ul>
</li>
<li>Open Graph (<code>:og</code>)</li>
<li>Twiter Cards (<code>:twitter</code>)</li>
<li>Google Plus (Author Rank)

<ul>
<li>Author links (<code>:author</code>)</li>
<li>Publisher links (<code>:publisher</code>)</li>
</ul>
</li>
<li>必要に応じて

<ul>
<li>Pagination links (<code>:prev</code>, <code>:next</code>)</li>
<li>Noindex, Nofollow</li>
</ul>
</li>
</ul>


<h2>SitemapGenerator</h2>

<p><a href="https://github.com/kjvarga/sitemap_generator">https://github.com/kjvarga/sitemap_generator</a></p>

<p>サイトマップを簡単に作るためのgem. 地味にめんどくさいサイトマップのインデックスの作成や,
各検索エンジンにPing送信, 検索エンジン別にサイトマップを変更したりして便利.</p>

<h3>インストール</h3>

<p>MetaTagsと同様Bundleでインストールを行う.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;sitemap_generator&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>次に, <code>config/sitemap.rb</code>を作成する. 以下のコマンドを実行する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h3>使い方</h3>

<p><code>config/sitemap.rb</code>以下に追加したいURLを<code>add</code>メソッドで行う.</p>

<figure class='code'><figcaption><span>config/sitemap.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">create</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Article</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span>
</span><span class='line'>    <span class="n">add</span> <span class="n">article_show_path</span><span class="p">(</span><span class="n">article</span><span class="p">),</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">7</span><span class="p">,</span> <span class="ss">:changefreq</span> <span class="o">=&gt;</span> <span class="s1">&#39;weekly&#39;</span><span class="p">,</span> <span class="ss">:astmod</span> <span class="o">=&gt;</span> <span class="n">article</span><span class="o">.</span><span class="n">updated_at</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>また, いろんな設定ができる.</p>

<p>詳細は<a href="https://github.com/kjvarga/sitemap_generator#sitemap-configuration">https://github.com/kjvarga/sitemap_generator#sitemap-configuration</a>のSitemap Optionsより確認できる.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ホストを設定する</span>
</span><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">default_host</span> <span class="o">=</span> <span class="s2">&quot;http://example.com&quot;</span>
</span><span class='line'><span class="c1"># サイトマップを配置するディレクトリを設定する</span>
</span><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">sitemaps_path</span> <span class="o">=</span> <span class="s1">&#39;sitemaps/&#39;</span>
</span><span class='line'><span class="c1"># インデックスサイトマップを作成するかどうか設定する</span>
</span><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">create_index</span> <span class="o">=</span> <span class="ss">:auto</span>
</span></code></pre></td></tr></table></div></figure>


<p>サイトマップの生成は, Rakeコマンドより行う.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="n">clean</span>                      <span class="c1"># サイトマップを削除する</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="n">create</span>                     <span class="c1"># サイトマップを作成する(検索エンジンにpingを送らない)</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="n">refresh</span>                    <span class="c1"># サイトマップを作成し, 検索エンジンにpingを送る</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="ss">refresh</span><span class="p">:</span><span class="n">no_ping</span>            <span class="c1"># サイトマップを作成する(検索エンジンにpingを送らない, たぶんsitemap:createと一緒?)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octpress]]></title>
    <link href="http://blog.yucchiy.com/blog/2014/06/23/hello-octopress/"/>
    <updated>2014-06-23T01:39:12+09:00</updated>
    <id>http://blog.yucchiy.com/blog/2014/06/23/hello-octopress</id>
    <content type="html"><![CDATA[<p>なんとなくOctopressに引っ越ししてみた. これからはこちらでブログを書く.</p>
]]></content>
  </entry>
  
</feed>
