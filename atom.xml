<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Yucchiy's blog]]></title>
  <link href="http://blog.yucchiy.com/atom.xml" rel="self"/>
  <link href="http://blog.yucchiy.com/"/>
  <updated>2014-10-18T17:12:29+09:00</updated>
  <id>http://blog.yucchiy.com/</id>
  <author>
    <name><![CDATA[yucchiy]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[install-opencv3-with-contrib]]></title>
    <link href="http://blog.yucchiy.com/2014/10/18/install-opencv3-with-contrib/"/>
    <updated>2014-10-18T16:41:14+09:00</updated>
    <id>http://blog.yucchiy.com/2014/10/18/install-opencv3-with-contrib</id>
    <content type="html"><![CDATA[]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rubyで簡単にバッチ処理の並列化を行う]]></title>
    <link href="http://blog.yucchiy.com/2014/10/14/ruby-batch-parallel/"/>
    <updated>2014-10-14T12:22:27+09:00</updated>
    <id>http://blog.yucchiy.com/2014/10/14/ruby-batch-parallel</id>
    <content type="html"><![CDATA[<p>研究のプログラムで, さくっと結果出したいけど, パラメータのチューニングも面倒なので,
適当に指定したパラメータの組み合わせを与えて, プログラムを回したいことは結構多いと思う.</p>

<p>その時に同じプログラムに異なるパラメータを投げて, そのバッチ実行を並列化したい, ということをRubyだと簡単にできるので紹介.
ちなみに動作環境は, Mac OS X Mavericksで, Rubyは2.1.3を利用している.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby</span>
</span><span class='line'>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;parallel&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">num_process</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ps1</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="o">]</span>
</span><span class='line'><span class="n">ps2</span> <span class="o">=</span> <span class="o">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="o">]</span>
</span><span class='line'><span class="n">ps3</span> <span class="o">=</span> <span class="o">[</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="no">Parallel</span><span class="o">.</span><span class="n">each</span><span class="p">(</span><span class="n">ps1</span><span class="o">.</span><span class="n">product</span><span class="p">(</span><span class="n">ps2</span><span class="p">,</span> <span class="n">ps3</span><span class="p">),</span> <span class="ss">:in_processes</span> <span class="o">=&gt;</span> <span class="n">num_thread</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>  <span class="n">p1</span> <span class="o">=</span> <span class="n">e</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>  <span class="n">p2</span> <span class="o">=</span> <span class="n">e</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span>
</span><span class='line'>  <span class="n">p3</span> <span class="o">=</span> <span class="n">e</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">cmd</span> <span class="o">=</span> <span class="s2">&quot;./hoge </span><span class="si">#{</span><span class="n">p1</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">p2</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">p3</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="nb">system</span> <span class="n">cmd</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>ポイントは, <code>Parallel#each</code>に渡す配列を<code>Array#product</code>メソッドを用いて組み合わせを生成しているところで, こうすると, <code>ps1</code>, <code>ps2</code>, <code>ps3</code>のパラメータの組み合わせを簡単に列挙できる.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLionでOpenCV]]></title>
    <link href="http://blog.yucchiy.com/2014/09/16/clion-opencv/"/>
    <updated>2014-09-16T01:00:23+09:00</updated>
    <id>http://blog.yucchiy.com/2014/09/16/clion-opencv</id>
    <content type="html"><![CDATA[<p>JetBrainsが最近C/C++用のIDEである<a href="http://www.jetbrains.com/clion/">CLion</a>をリリースしてて, いままでMac&amp;C++(主に研究でOpenCVを使う都合)の環境に困ってた僕に朗報だったので早速導入した.</p>

<p>今回は, CLionでOpenCVを動かしてみたのでそのメモを備忘録代わりにブログに書いてみた.</p>

<p>ちなみに動作環境は, Mac OS X Mavericks.</p>

<h2>インストール</h2>

<h3>OpenCVのインストール</h3>

<p>OpenCVは, ビルドにCMakeを要するので, Homebrewとかでインストールしておく. 最近だと3.0.xが入るっぽい.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install cmake</span></code></pre></td></tr></table></div></figure>

<p>次にOpenCVをインストールする.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir tmp
</span><span class='line'>git clone git@github.com:Itseez/opencv.git
</span><span class='line'>cd opencv
</span><span class='line'>git checkout 2.4.9
</span><span class='line'>mkdir release
</span><span class='line'>cd release
</span><span class='line'>cmake  ../
</span><span class='line'>make
</span><span class='line'>make install</span></code></pre></td></tr></table></div></figure>

<h2>CLionからOpenCVを利用する</h2>

<p>まずおもむろにCLionからNew Projectを作成する. すると, <code>CMakeLists.txt</code>と<code>main.cpp</code>が作成される. OpenCVを上記の通りにビルドしている場合は,
<code>CMakeLists.txt</code>で, <code>find_package(OpenCV)</code>を呼び出し, <code>target_link_libraries</code>で, OpenCVのライブラリを読み込むことで利用できる.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cmake_minimum_required(VERSION 3.0.0)
</span><span class='line'>project(sample_clion_opencv)
</span><span class='line'>
</span><span class='line'>find_package(OpenCV REQUIRED)
</span><span class='line'>
</span><span class='line'>set(SOURCE_FILES main.cpp)
</span><span class='line'>add_executable(sample_clion_opencv ${SOURCE_FILES})
</span><span class='line'>target_link_libraries(sample_clion_opencv ${OpenCV_LIBS})</span></code></pre></td></tr></table></div></figure>

<p>試しに, SURF特徴を抽出して表示するサンプルを書いてみた.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/opencv.hpp&gt;</span>
</span><span class='line'><span class="cp">#include &lt;opencv2/nonfree/nonfree.hpp&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">image</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">imread</span><span class="p">(</span><span class="s">&quot;lena.png&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">image</span><span class="p">.</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;No image data&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">initModule_features2d</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">FeatureDetector</span><span class="o">&gt;</span> <span class="n">detector</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">FeatureDetector</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;SURF&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">Ptr</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">DescriptorExtractor</span><span class="o">&gt;</span> <span class="n">extractor</span> <span class="o">=</span> <span class="n">cv</span><span class="o">::</span><span class="n">DescriptorExtractor</span><span class="o">::</span><span class="n">create</span><span class="p">(</span><span class="s">&quot;SURF&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">vector</span><span class="o">&lt;</span><span class="n">cv</span><span class="o">::</span><span class="n">KeyPoint</span><span class="o">&gt;</span> <span class="n">keypoints</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">descriptor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">detector</span><span class="o">-&gt;</span><span class="n">detect</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">keypoints</span><span class="p">);</span>
</span><span class='line'>    <span class="n">extractor</span><span class="o">-&gt;</span><span class="n">compute</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">keypoints</span><span class="p">,</span> <span class="n">descriptor</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">output</span><span class="p">;</span>
</span><span class='line'>    <span class="n">drawKeypoints</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">keypoints</span><span class="p">,</span> <span class="n">output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">imwrite</span><span class="p">(</span><span class="s">&quot;output.png&quot;</span><span class="p">,</span> <span class="n">output</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[unite-ghqとfile_recが便利]]></title>
    <link href="http://blog.yucchiy.com/2014/09/04/unite-vim-ghq-filerec/"/>
    <updated>2014-09-04T08:49:55+09:00</updated>
    <id>http://blog.yucchiy.com/2014/09/04/unite-vim-ghq-filerec</id>
    <content type="html"><![CDATA[<p>レポジトリの管理とか自分の中ではうまい解決がなくて, 昔はプロジェクトにジャンプするzsh関数書いてたりした.</p>

<p>最近ではghqとpecoを使って便利ってなってたところに, たまたまTL上で<a href="https://github.com/sorah/unite-ghq">unite-ghq</a>の存在を知って, 使ってみたらしっくりきたのでブログ書いた.</p>

<p>.vimrcに以下のように記述する. ただし<a href="https://github.com/motemen/ghq">ghq</a>のインストールは予め済ませておき, .vimrcに<a href="https://github.com/sorah/unite-ghq/issues/1">ghqへのパスを通す必要がある</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'>NeoBundle <span class="s1">&#39;sorah/unite-ghq&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">noremap</span> [unite] <span class="p">&lt;</span>Nop<span class="p">&gt;</span>
</span><span class='line'>map     <span class="p">&lt;</span>Leader<span class="p">&gt;</span><span class="k">u</span> [unite]
</span><span class='line'>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span>[unite]<span class="k">p</span>         :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>Unite file_rec/async<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span><span class='line'><span class="nb">nnoremap</span> <span class="p">&lt;</span><span class="k">silent</span><span class="p">&gt;</span>[unite]<span class="k">g</span>         :<span class="p">&lt;</span>C<span class="p">-</span><span class="k">u</span><span class="p">&gt;</span>Unite ghq<span class="p">&lt;</span>CR<span class="p">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

<p>プロジェクトディレクトリ移動は<code>,ug</code>で行って, プロジェクト内でのファイル検索は<code>,up</code>で行う. 便利.</p>

<p>今までは<a href="https://github.com/yucchiy/dotfiles/blob/master/zsh/zsh/sources/peco/src.zsh">ghqとpecoを組み合わせて</a>プロジェクトディレクトリに移動し, そこでvimを開くみたいな感じだったが, これだとすべてvimで完結してよいと思った.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでAPIを作るときのエラー処理について]]></title>
    <link href="http://blog.yucchiy.com/2014/08/31/error-rails-api/"/>
    <updated>2014-08-31T20:20:27+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/31/error-rails-api</id>
    <content type="html"><![CDATA[<p><a href="http://blog.yucchiy.com/2014/08/20/delivery-api-with-rails/">RailsでAPIを雑に書いていたんだけど</a>, コントローラとかをどう書くとエラー処理しやすくなっていいかなーと考えていて, 個人的に考えがまとまったのでブログ書いた.</p>

<p>※9/1に追記書いた.</p>

<h2>良いエラー処理について</h2>

<p>個人的にAPIを書く上で(API書くに限らない気はするけど)どういうふうにエラー処理を行うと良いかなーと考えてみると</p>

<ul>
<li>コントローラ内では基本的に, <strong>ある関数の処理が失敗して, 次の処理が行えない場合はすべて例外を投げる</strong></li>
<li>例外は各々のコントローラ内で例外のキャッチは行わず, すべてApplicationControllerなど, <strong>親コントローラ内の1メソッドで完結させる</strong></li>
</ul>

<p>かなーと思う. APIのエラー処理は, <a href="http://instagram.com/developer/endpoints/">Envelopeにステータスコードとエラーメッセージを書いて</a>, APIのフォーマットを統一するほうがクライアントが作りやすそうだし, またこのように処理することで, <strong>エラー処理での条件分岐の必要がなくなり</strong>, コントローラの可読性の向上にもつながる. </p>

<h2>Grape vs Rails</h2>

<p>APIつくるんだったら, <a href="https://www.google.co.jp/search?q=rails+api&amp;oq=rails+api+&amp;aqs=chrome..69i57j69i60l3j69i59j69i61.9488j0j1&amp;sourceid=chrome&amp;es_sm=119&amp;ie=UTF-8">Grapeサイコー</a>という意見が多い.</p>

<p>確かにGrapeのDSLは直感的に書けるし, バリデーションなど便利メソッドが多いけど, 個人的には素のRailsでAPIを書くほうがセンスが良いと感じる. というのもRackベースなので, ルーティングなど独自のものが多く, せっかくRailsが提供してるRakeのタスクや, ジェネレータがそのまま使えないからである.</p>

<p>SinatraとかでAPI納品するんだったら, Grapeとかいれるのはすごい良さそう.</p>

<p>ただ, そのままのRailsではJSONやXMLをいい感じの構造で返す仕組みが貧弱なので, <a href="https://github.com/nesquena/rabl">RABL</a>を導入するのが便利. これはJSONやXMLをいい感じに生成するためのテンプレートエンジンで, DSLを用いて直感的にAPI出力を定義できる.</p>

<p>また, <a href="https://github.com/nesquena/rabl/wiki/Using-Layouts">RailsのLayoutsにも対応しており</a>, <code>views/layouts/application.rabl</code>とかを定義しておくことで, <a href="http://instagram.com/developer/endpoints/">Envelope</a>みたいなのを簡単に実現できる.</p>

<h2>コントローラ内でのエラー処理</h2>

<p>上記に上げたとおり, コントローラ内でモデルのCRUDなどの<strong>処理が失敗した場合</strong>は例外を投げてApplicationControllerに処理を渡す.</p>

<p>例えば<code>show</code>メソッドでは以下のように処理する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>  <span class="vi">@piyo</span> <span class="o">=</span> <span class="no">Piyo</span><span class="o">.</span><span class="n">find_by!</span><span class="p">(</span><span class="ss">:id</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h2>ApplicationControllerでのエラー処理</h2>

<p>以下のようなConcernを定義し, ApplicationControllerから読み込むことでエラー処理を行う.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api::ErrorHandlers</span>
</span><span class='line'>  <span class="kp">extend</span> <span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Concern</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">attr_accessor</span> <span class="ss">:status</span><span class="p">,</span> <span class="ss">:message</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">included</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">before_filter</span> <span class="ss">:setup</span>
</span><span class='line'>    <span class="n">rescue_from</span> <span class="no">StandardError</span><span class="p">,</span> <span class="ss">:with</span> <span class="o">=&gt;</span> <span class="ss">:rescue_exception</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rescue_exception</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">rescuable?</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>      <span class="n">re</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="p">)</span> <span class="p">?</span> <span class="n">e</span> <span class="p">:</span> <span class="no">RESCUABLE_EXCEPTIONS</span><span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span><span class="o">]</span>
</span><span class='line'>      <span class="vi">@status</span> <span class="o">=</span> <span class="n">re</span><span class="o">.</span><span class="n">status</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="vi">@status</span> <span class="o">=</span> <span class="mi">500</span>
</span><span class='line'>      <span class="vi">@message</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="n">message</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">render</span> <span class="s1">&#39;api/errors/base&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">rescuable?</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="p">)</span> <span class="o">||</span> <span class="no">RESCUABLE_EXCEPTIONS</span><span class="o">.</span><span class="n">has_key?</span><span class="p">(</span><span class="n">e</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@status</span> <span class="o">=</span> <span class="mi">200</span>
</span><span class='line'>    <span class="vi">@message</span> <span class="o">=</span> <span class="s2">&quot;OK&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>ポイントはすべての例外処理を<code>rescue_exception</code>で受け取るところである. この<code>rescue_exception</code>は投げられた例外によって, 適切なステータスコードとエラーメッセージをビューに渡すメソッドで, それらはEnvelopeとして出力される. 例えばRablのLayoutsで以下のように定義することでエラー出力する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">  &quot;status&quot;: </span><span class="cp">&lt;%=</span> <span class="vi">@status</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">html_safe</span> <span class="cp">%&gt;</span><span class="x">,</span>
</span><span class='line'><span class="x">  &quot;message&quot;: </span><span class="cp">&lt;%=</span> <span class="vi">@message</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">html_safe</span> <span class="cp">%&gt;</span><span class="x">,</span>
</span><span class='line'><span class="x">  &quot;data&quot;: </span><span class="cp">&lt;%=</span> <span class="k">yield</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>ここで, 例外に対応するステータスコードを以下のように引く.</p>

<ol>
<li>独自の例外の場合は, その<strong>例外クラスにステータスを保持させる</strong></li>
<li>組み込みの例外（例えばActiveRecordのNotFoundException）の場合は, 例外に対応する<strong>ステータスコードの対応表から</strong>引く</li>
<li>それ以外の例外の場合は500を返す</li>
</ol>

<p>1の場合は, <code>Api::Exceptions::RescuableException</code>を作成して, それを継承した独自の例外クラスを投げて対応する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api::Exceptions</span>
</span><span class='line'>  <span class="k">class</span> <span class="nc">RescuableException</span> <span class="o">&lt;</span> <span class="no">StandardError</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:status</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">status</span> <span class="o">=</span> <span class="mi">500</span><span class="p">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Error&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="n">message</span><span class="p">)</span>
</span><span class='line'>      <span class="vi">@status</span> <span class="o">=</span> <span class="n">status</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="nc">UnAuthenticationException</span> <span class="o">&lt;</span> <span class="no">RescuableException</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">message</span> <span class="o">=</span> <span class="s2">&quot;Unauthorized&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="k">super</span><span class="p">(</span><span class="mi">401</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>2の場合は, <code>RESCUEABLE_EXCEPTIONS</code>みたいなハッシュを作って対応する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RESCUABLE_EXCEPTIONS</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">RecordNotFound</span><span class="o">.</span><span class="n">to_s</span><span class="o">.</span><span class="n">to_sym</span> <span class="o">=&gt;</span> <span class="no">Api</span><span class="o">::</span><span class="no">Exceptions</span><span class="o">::</span><span class="no">RescuableException</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">404</span><span class="p">,</span> <span class="s2">&quot;Record Not Found&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>3の場合は, 上に2つの条件を満たさない場合に500を返すように<code>rescue_exception</code>メソッドを書くことで対応する.</p>

<h2>まとめ</h2>

<p>ApplicationControllerで<code>Api::ErrorHandlers</code>を定義し, <code>rescue_exception</code>で例外処理することで, 開発速度が上がって良さそうだという個人的なエラー処理のまとめを書いてみた.</p>

<h2>追記</h2>

<p><a href="https://twitter.com/r7kamura">@r7kamura</a>さんに, 以下のリプライを頂いて</p>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yucchiy_">@yucchiy_</a> Rack middlewareの中で例外発生したらどうしますか</p>&mdash; いもり手 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/506088448566915072">2014, 8月 31</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p><a href="https://twitter.com/yucchiy_">@yucchiy_</a> 例えばありがちな問題として、RailsにContent-Type: application/jsonを指定しながら誤ったJSONを送ると、パース部分はRack middlewareで実装されているので、例外が発生して500が返ります (400とかにしたい)</p>&mdash; いもり手 (@r7kamura) <a href="https://twitter.com/r7kamura/statuses/506094476809367552">2014, 8月 31</a></blockquote>

<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

<p>確かに, <strong>Rack middlewareのこととか全く考慮できてなくてダメダメ</strong>って感じだった.</p>

<p>そして起きたら<a href="http://qiita.com/r7kamura/items/2e88adbdd1782277b2e7">RailsでAPIをつくるときのエラー処理</a>っていうすごい知見がまとめられていた.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[京都 Android 勉強会]]></title>
    <link href="http://blog.yucchiy.com/2014/08/23/kyoto-android-201408/"/>
    <updated>2014-08-23T15:02:20+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/23/kyoto-android-201408</id>
    <content type="html"><![CDATA[<p>京都Android勉強会に参加したときのメモを, 参加記としてブログに公開.</p>

<h2>Androidとアカウント @cockscomb さん</h2>

<p>AccountManagerがひたすら便利だという話.</p>

<h3>AccountManager</h3>

<ul>
<li>Androidのアカウント管理システム</li>
<li>認証トークンの取得を抽象化

<ul>
<li>iOSにないおもしろい機能</li>
</ul></li>
<li>アプリ間での共有</li>
<li>認証トークンを暗黙的に取得

<ul>
<li>無効化されるまでキャッシュ・自動的に取得</li>
</ul></li>
</ul>

<h3>使い方</h3>

<ul>
<li>AndroidManifest.xmlに記述

<ul>
<li>account-authenticator という項目を追加</li>
</ul></li>
<li><code>Service</code>を継承した, <code>AuthenticationService</code>

<ul>
<li>コピペで一瞬で書ける</li>
</ul></li>
<li><code>AbstractAccountAuthenticaticator</code>を継承したクラスを作成

<ul>
<li><code>addAccount</code>, <code>getAuthToken</code>メソッドが重要</li>
</ul></li>
</ul>

<p>サンプルコードは, <a href="https://github.com/android/platform_development/tree/master/samples/SampleSyncAdapter">SampleSyncAdapter</a>にあるのでこれを見たらよい.</p>

<h3>VolleyとAccountManagerの連携</h3>

<ul>
<li>自動的に非同期に呼び出し</li>
<li>認証失敗時にはAuthFailureError</li>
<li>AuthenticatorをMockしてテストが可能</li>
</ul>

<h2>クックパッドの業務の話 @rejasupotaro さん</h2>

<p>一年で本体アプリにコミットする人が急増したので, いかにしてスケールするかみたいな発表.</p>

<h3>開発環境</h3>

<ul>
<li>Android Studio + Gradle</li>
<li>Groovyで自動化

<ul>
<li>リリースエンジニアリングをコマンド一つでやったりできるっぽい</li>
</ul></li>
<li>Android Frontier</li>
</ul>

<h3>イテレーション</h3>

<ul>
<li>二週間に1度リリース. タスクはすべてGithubのissueで管理.

<ul>
<li>だいたい100個くらい消化してる</li>
</ul></li>
</ul>

<h3>レビュー</h3>

<ul>
<li>レビューがボトルネック</li>
<li>レビュータイムを設ける

<ul>
<li>10時に手付かずのPRがチャットに流れる</li>
</ul></li>
<li>レビュー系はBotでいろいろ自動化

<ul>
<li>過去の経験からレビューにチェックリストをつける. 障害系のチェックに便利</li>
</ul></li>
</ul>

<h4>UIテスト</h4>

<ul>
<li>自動化はコストに見合わなくて断念</li>
<li>iOSは<a href="http://appium.io/">Appium</a>でシナリオが100個ある</li>
</ul>

<h4>ドックフーディング</h4>

<ul>
<li>PRをマージして, Jenkinsがテストして, ベータ版をDeployGateでリリース.

<ul>
<li>ただあんまりうまく行ってない</li>
</ul></li>
</ul>

<h3>エラー監視</h3>

<ul>
<li>クラッシュリティクスでクラッシュ数と推移とクラッシュ確認(Crash Free Usersを99.n%以上にする)</li>
</ul>

<h3>リリースしすぎ問題</h3>

<ul>
<li>リリースし過ぎると, 毎回ダウンロードが入って不便.

<ul>
<li>レビューでディスられるっぽい</li>
</ul></li>
<li>LINEとFacebookは一ヶ月サイクル(?)</li>
</ul>

<h2>XML BY DESIGN デザイナがコードを書くとちょっと良いこと @yulily100 さん</h2>

<p>XMLをデザイナが書くといろいろ開発が幸せになる話.</p>

<script async="true" class="speakerdeck-embed" data-id="dd195b300fbd0132c8492abbbf00bf60" src="//speakerdeck.com/assets/embed.js"> </script>

<h3>UIをつくる</h3>

<ul>
<li>ペーパープロトタイピング

<ul>
<li>プログラマとも相談する. 実装とかの兼ね合い</li>
</ul></li>
<li>ユーザビリティテスト</li>
<li>プログラマと一緒にやって, 前提を共有する</li>
</ul>

<h3>コードを書く</h3>

<ul>
<li>Githubを使って, PRベースで進める

<ul>
<li>細かい相談をコメントで</li>
<li>スクショはれるし便利</li>
</ul></li>
<li>出し分けが必要になった時点で, pushしてエンジニアにやってもらう.</li>
<li>全部終わったらレビューをお願いする. 良かったらマージ.</li>
</ul>

<h3>なにが良いか</h3>

<ul>
<li>動くものを触りながらデザインすることができる

<ul>
<li>動かないとわからないこともある</li>
</ul></li>
<li>カンプを作らなくてもいいから, 無駄な時間を削減</li>
<li>エンジニアとワイワイ出来る</li>
</ul>

<h2>オブジェクト指向やめましょう @kis さん</h2>

<p>オブジェクト指向は, 語られるコンテキストがバラバラで腐ったBuzzWord.</p>

<p>オブジェクト指向を使ったからといって, 良いコードを書けるわけではないのでそんな夢は捨ててちゃんと勉強しましょうという話.</p>

<h2>黒魔術 @_kaiinui さん</h2>

<p>Javaの黒魔術: Annotationについて</p>

<script async="true" class="speakerdeck-embed" data-id="45f2eb000cd301321e865e226fb19d76" src="//speakerdeck.com/assets/embed.js"> </script>

<h3>良さ</h3>

<ul>
<li>宣言的</li>
<li>コードと宣言を分離できる</li>
<li>ミスを防止できる</li>
</ul>

<h3>作り方</h3>

<p>AspectJを使うと作れる</p>

<h3>ライブラリ</h3>

<p>紹介されたライブラリ. <a href="https://github.com/JakeWharton/hugo">JakeWharton</a>さんは, Android Annotationのプロらしい.</p>

<ul>
<li><a href="https://github.com/JakeWharton/hugo">Hugo</a></li>
<li><a href="https://github.com/frankiesardo/icepick">Icepick</a></li>
<li><a href="https://github.com/square/retrofit">Retrofit</a></li>
<li><a href="https://github.com/JakeWharton/butterknife">Butter knife</a></li>
</ul>

<h2>Android アプリ開発における Gradle ビルドシステム @nobuoka さん</h2>

<p>Gradleについての知見.</p>

<iframe src="http://www.slideshare.net/slideshow/embed_code/38432268 " width="510" height="420" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="margin-top: 0px !important; border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen></iframe> 

<h3>GradleとAndroid アプリ開発</h3>

<h4>Gradleとは</h4>

<ul>
<li>ビルドシステム</li>
<li>ビルド設定はGroovyによるDSL</li>
<li>Mavenによる依存関係が組み込まれている</li>
<li>最近は C/C++/Objective-Cもサポートされ始めた</li>
</ul>

<h4>利点と欠点</h4>

<ul>
<li>自由度が高い(Groovyの処理を書ける)</li>
<li>Maven リポジトリが使える</li>
<li>Groovyになれるまで難しい

<ul>
<li>デバッグとか難しい</li>
</ul></li>
</ul>

<h3>GradleやAndroid Gradle pluginの便利機能</h3>

<ul>
<li>デバッグ時だけ機能を変化させることができる</li>
<li>Build Variants

<ul>
<li>Build types</li>
<li>Product Flavors: 同じアプリから複数アプリ</li>
</ul></li>
<li>BuildConfigのプロパティをビルド時に決定</li>
</ul>

<h3>Gradleプラグインの作り方</h3>

<p>作り方も使い方も簡単</p>

<h4>プラグインの利点</h4>

<ul>
<li>再利用可能</li>
<li>Groovyでもかけるし, JavaやScalaでも書ける</li>
</ul>

<h2>感想とか</h2>

<p>久々に勉強会に参加したけど, 自分の知らない発見とかあってよかった.</p>

<p>個人的には, <a href="https://twitter.com/rejasupotaro">@rejasupotaro</a>さんの業務の話が面白かった. リリースし過ぎるとレビューでdisられるとか, なるほどアプリって大変だって思った.</p>

<p><a href="https://twitter.com/_kaiinui">@_kaiinui</a>さんのJava Annnotaion, 黒魔術だ〜全く便利じゃないって言っておられたけど普通に便利だなとおもった.</p>

<p>Android勉強会, 関西で定期的に開催されるらしいし次も是非参加したい. 今度は是非<a href="https://twitter.com/yucchiy_/status/503061258065547264">この夏もっとおしゃれなTシャツ</a>をゲットしたい.</p>

<h2>参考資料</h2>

<ul>
<li><a href="http://yulily100.hatenablog.jp/entry/2014/08/27/112604">デザイナーがandroidのXMLコーディングをやる利点について発表しました - yulily100&#39;s blog</a></li>
<li><a href="http://vividcode.hatenablog.com/entry/study-meeting/kyoto-android-2014-08">発表資料: Android アプリ開発における Gradle ビルドシステム (京都 Android 勉強会 2014.08) - ひだまりソケットは壊れない</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RailsでAPIを書いたときの雑な感想]]></title>
    <link href="http://blog.yucchiy.com/2014/08/20/delivery-api-with-rails/"/>
    <updated>2014-08-20T15:35:23+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/20/delivery-api-with-rails</id>
    <content type="html"><![CDATA[<p>某インターンのメンターをしながら, メンターたちと空いてる時間を使ってネイティブアプリを書いていた.
その時バックエンドをRailsで書いて思ったことを夏休みの感想文としてまとめてみた.</p>

<h2>ライブラリの選定</h2>

<h3>Grape</h3>

<p>RailsでAPIといえば, <a href="https://github.com/intridea/grape">Grape</a>というライブラリが有名だけど, 特にRailsのデフォルトのコントローラで困ることが少なかったのと, Railsとの記法の違いっぽいところがあって, 導入しなかった.</p>

<p>ただいま考えてみれば, <a href="https://github.com/intridea/grape#parameter-validation-and-coercion">パラメータのバリデーション</a>や, (どう管理するのかしらんけど)<a href="https://github.com/intridea/grape#cookies">Cookie</a>をサポートしていたり, <a href="https://github.com/intridea/grape#exception-handling">エラーハンドリング</a>もいい感じだし, 導入してみたら楽だったかもしれない.</p>

<p>各アクションに<code>desc</code>を書いておけば, ドキュメントの自動生成とかできたりするし. 実はとても便利かもしれない.(反省終わり)</p>

<h3>Rabl</h3>

<p>Grapeのかわりに<a href="https://github.com/nesquena/rabl">Rabl</a>というJSONとかの記述を楽にするDSLを提供するテンプレートエンジンを導入した. 単純にRailsの<code>render :json</code>とかで出力してしまってもいいのだが, コントローラでJSONの構造を構築するのはスマートではないし, InstagramやTwitterのAPIでは, すべてのAPIレスポンスに<a href="http://instagram.com/developer/endpoints/">Envelope</a>と呼ばれる, APIのコールにステータスコードやメッセージをのせるケースが多く, そういうのに対応させようと思うとRablがいいかな, と思って導入した.</p>

<p>例えば, ビューで</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># app/views/posts/index.rabl</span>
</span><span class='line'><span class="n">collection</span> <span class="vi">@posts</span>
</span><span class='line'><span class="n">attributes</span> <span class="ss">:id</span><span class="p">,</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:subject</span>
</span><span class='line'><span class="n">child</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span> <span class="p">{</span> <span class="n">attributes</span> <span class="ss">:full_name</span> <span class="p">}</span>
</span><span class='line'><span class="n">node</span><span class="p">(</span><span class="ss">:read</span><span class="p">)</span> <span class="p">{</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span> <span class="n">post</span><span class="o">.</span><span class="n">read_by?</span><span class="p">(</span><span class="vi">@user</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

<p>って書くと</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="p">[{</span>  <span class="s2">&quot;post&quot;</span> <span class="o">:</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="s2">&quot;id&quot;</span> <span class="o">:</span> <span class="mi">5</span><span class="p">,</span> <span class="s2">&quot;title&quot;</span><span class="o">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span> <span class="s2">&quot;subject&quot;</span><span class="o">:</span> <span class="s2">&quot;...&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;user&quot;</span> <span class="o">:</span> <span class="p">{</span> <span class="s2">&quot;full_name&quot;</span> <span class="o">:</span> <span class="s2">&quot;...&quot;</span> <span class="p">},</span>
</span><span class='line'>    <span class="s2">&quot;read&quot;</span> <span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}]</span>
</span></code></pre></td></tr></table></div></figure>

<p>って出力される(公式丸パクリ). 便利.</p>

<h2>RailsでAPIを書くときの知見</h2>

<p>Rails+RablでAPI書いてたまった知見を書いていく.</p>

<h3>CSRF対策</h3>

<p>APIリクエストの場合, CSRF対策が特に必要ないので, <code>ApplicationController</code>に以下のように記述することで, CSRFを回避する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">skip_before_action</span> <span class="ss">:verify_authenticity_token</span><span class="p">,</span> <span class="k">if</span><span class="p">:</span> <span class="ss">:json_request?</span>
</span><span class='line'>
</span><span class='line'><span class="kp">protected</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">json_request?</span>
</span><span class='line'>  <span class="n">request</span><span class="o">.</span><span class="n">format</span><span class="o">.</span><span class="n">json?</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>Strong Parameters</h3>

<p>RailsのForm+Strong Parametersだと, よく以下のような記述を見る.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">article_params</span>
</span><span class='line'>   <span class="n">params</span><span class="o">.</span><span class="n">require</span><span class="p">(</span><span class="ss">:article</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:headline</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>ただAPIのクエリは, <code>{article:{ headline: &quot;hoge&quot;, content: &quot;piyo&quot; }}</code>みたいなネストした感じでクエリ送ることってあんまりないと思う. ということでStrong Parametersを利用するために以下のように書いた.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">article_params</span>
</span><span class='line'>  <span class="no">ActionController</span><span class="o">::</span><span class="no">Parameters</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">params</span><span class="p">)</span><span class="o">.</span><span class="n">permit</span><span class="p">(</span><span class="ss">:headline</span><span class="p">,</span> <span class="ss">:content</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<h3>基底コントローラの活用</h3>

<p>RailsでAPI書いてると, 多分<code>/api</code>以下はデフォルトでJSONで返したいニーズとかあると思う. そういう場合は, <code>ApplicationController</code>を継承した<code>Api::ApplicationController</code>とか定義して<code>/app/controllers/api/application_controller.rb</code>とし, そこに<code>respond_to :json</code>とか, <code>default_format :json</code>とかしておくと何かと便利.</p>

<h2>不満点とか</h2>

<p>不便だと思った点とか上げていく.</p>

<h3>例外の扱い</h3>

<p>Railsのコントローラ内で投げられる例外は, すべてそのステータスコードをもってほしいと思った. またコントローラ内でモデルのCRUDを行って失敗した時は, 直ちに例外を投げるように実装を行うべきだと思った.</p>

<p>明示的にキャッチしなかった例外は, <code>ApplicationController</code>でハンドルし, 例外が持っているメッセージとステータスコードを出力することで, 一貫したエラー処理が行えるし, 各コントローラでは基本例外を投げるので, 分岐が減り, 読みやすいコントローラが書けるのではと思った.</p>

<p>あと, No route errorは例外でキャッチしたい.</p>

<h3>RablのLayoutsがうまく動かない</h3>

<p>最初に書いたEnvelopeの対応は<a href="https://github.com/nesquena/rabl/wiki/Using-Layouts">RablのLayouts</a>を使うと綺麗にかけて良さそうだけど, 以下のサンプルのソースを書いてもうまくいかなかった. 具体的には<code>yield</code>の部分が<code>nil</code>になってしまった.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">node</span><span class="p">(</span><span class="ss">:status</span><span class="p">)</span> <span class="p">{</span> <span class="n">response</span><span class="o">.</span><span class="n">status</span> <span class="p">}</span>
</span><span class='line'><span class="n">node</span><span class="p">(</span><span class="ss">:error</span><span class="p">)</span>  <span class="p">{</span> <span class="vi">@error</span><span class="o">.</span><span class="n">to_json</span><span class="o">.</span><span class="n">html_safe</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">node</span><span class="p">(</span><span class="ss">:result</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>  <span class="k">case</span> <span class="n">content_type</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:json</span>
</span><span class='line'>    <span class="no">Yajl</span><span class="o">::</span><span class="no">Parser</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>  <span class="k">when</span> <span class="ss">:xml</span>
</span><span class='line'>    <span class="no">Nori</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>直し方募集中.</p>

<h2>まとめ</h2>

<p>Railsで雑にAPIを納品した時の感想として, 概ねRailsでいい感じにかけていいけど, 多少不満とかあったのでまとめてみた. たぶんGrape導入したら解決しそうだし皆さんGrape使いましょう(完).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Androidエンジニアになった僕の開発環境と学習法]]></title>
    <link href="http://blog.yucchiy.com/2014/08/14/android-beginner-how-to-studying/"/>
    <updated>2014-08-14T23:43:33+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/14/android-beginner-how-to-studying</id>
    <content type="html"><![CDATA[<p>3,4年ウェッブエンジニアだった僕が, Androidエンジニアにジョブチェンして1週間経った(もちろん今まで通りウェブエンジニアは続けるけど). そんな僕がどういうふうにAndroidについて学習してるか記事にしてみた.</p>

<p>まだAndroidエンジニアになってから間もないので, この記事を見た方で, これは間違ってるよとか, このやり方が良いよって意見がある方は, ぜひコメントとか<a href="https://twitter.com/yucchiy_">@yucchiy_</a>までリプライとかしてもらえると嬉しいです.</p>

<h2>開発環境</h2>

<p>まず学習法とかの前に環境どうしてるかについて. 結論は<strong>Android Studio</strong>をベースとして開発環境を整えるのがしっくりきてる.</p>

<h3>Eclipse vs Android Studio</h3>

<p>Eclipse vs Android Studioだけど, 普段からWebStormとかPHPStormを使うことが多かったのでInteliJ PlatformなAndroid Studioを開発環境として選択した.</p>

<h4>Android Studioのインストール</h4>

<p>Android Studioは, Caskからコマンド一つでインストールできる.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew cask install android-studio</span></code></pre></td></tr></table></div></figure>

<p>またAndroid SDKは, Android Studioに入ってるものもあるが, スタンドアロンなSDKを用意しておく方が検証が楽そう. Homebrewを使ってる場合は, 以下のコマンドでインストールできる.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install android-studio</span></code></pre></td></tr></table></div></figure>

<p>Android StudioからスタンドアロンなSDKにパスを通すには<code>Project Structure</code>(多分<code>Cmd +</code>で立ち上がるやつ)から,SDK Location &gt; Android SDK Locationで設定できる. BrewでインストールしたSDKは<code>/user/local/Cellar/android-studio</code>に配置されている.</p>

<h4>Android Studioの便利なショートカット</h4>

<p>多分Eclipseにもあるんだろうけど<strong>便利なショートカットが豊富</strong>で, <code>Cmd + b</code>でクラスの定義元に飛んだり, Can&#39;t resolve errorが出てて, importするだけで解決するような場合は, 該当行に移動して<code>Alt + Shift</code>すると勝手にimportを行ってくれたり, クラスとかゲッター・セッターを自動で定義したかったら<code>Cmd + n</code>でいい感じにやってくれる. 多分他にもいろんな便利ショートカットが存在すると思うのでどんどん調べていきたい.</p>

<h3>動作確認</h3>

<p>手元に端末があったら, 特にこだわりがない限りは実機に転送して検証した方が良い. Androidデフォルトの端末は重たいし, 起動に時間がかかってストレスフルだった.</p>

<p>複数端末検証でエミュレータ使うなら<a href="http://www.genymotion.com/">Genymotion</a>一択だと思う. しかし手元の環境ではまだ動かせてない.</p>

<h2>学習法</h2>

<p>前提として僕はJavaのコーディング経験が半年弱くらい(?)有り, 主に<a href="https://gist.github.com/yucchiy/2885090">プログラミングコンテストでJavaを利用していた</a>. なので, Javaの基本的なコーティングとCollectionの使い方はなんとなく分かる. このへんの基本的な文法をしっかり抑えておかないと, Android開発は難しいと思うので, まず先にその辺をおさえておくのが良さそう.</p>

<h3>MixiのAndroidTrainingの基礎編を流し読み</h3>

<p>何もわからない状態だと簡単な画面遷移さえもままならないので, 軽く参考資料を流し読みした. ウェブの資料では, Mixiの<a href="https://github.com/mixi-inc/AndroidTraining">Androidのテキスト</a>が情報がまとまっていてよかった. ただし<strong>全部理解しようとするのではなく</strong>, どんなことをするのにこういうものを使えばいい, くらいを抑えておくので十分そう. ActivityとFragmentがどうなってるとか, Intent使うと画面遷移できるとか, Viewの作り方とかどうするかとか, その辺を抑えるだけでも十分だと思う.</p>

<p>特にAndroidは覚えることが多そうで, それらをちゃんと把握しきるのは大変なので, 作りながら<strong>困ったときやリファクタリング時に</strong>はじめて詳しく調べるのが効率が良さそう.</p>

<h3>作りたいものを決めてGithubを漁る</h3>

<p>僕がAndroidアプリで作ろうものは, とあるウェブサービスからOAuth連携して, APIからデータを引っ張ってきてデータを表示するビュワーアプリである. まずやったこととして, 「android oauth」でGithubで調べて, なんとなく<strong>スターが多いライブラリ</strong>を見つけてその<strong>サンプルのソースを写経</strong>することをした.</p>

<p>具体的には, <a href="https://github.com/wuman/android-oauth-client">wuman/android-oauth-client</a>というライブラリがあって, その<a href="https://github.com/wuman/android-oauth-client/tree/master/samples">サンプル</a>がかなり充実していたので, それを写経したり, さらにサンプルをいじって遊んだした.</p>

<p>この時<strong>動作検証のサイクルをこまめに行なう</strong>ということを注意して行った.</p>

<p>というのも, まだ慣れてない状態でまとめて写経して検証を行うと, 写経をミスっていたり, そのサンプルを更にいじったりするときに, 問題の切り分けが難しくなる. そのため, こまめに動作検証を行なったほうが学習効率が良い. 細かく動作検証を行うには, そのサンプルがどの順番で動くかをちゃんと把握しないといけないので, <strong>Androidのライフサイクルの理解が深まったり</strong>とか一石二鳥だと思う.</p>

<p>このように学習することで, APIの連携にはどういうライブラリを使えばいいとか, <a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/api/model/Tweet.java">APIとクラスのインスタンスの紐付け</a>をどうするとか, AsyncTaskLoaderは<a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/TwitterActivity.java#L137">独自のローダを定義しておく</a>と何かと便利そうだとか, ListViewへアダプタ渡すときは<a href="https://github.com/wuman/android-oauth-client/blob/master/samples/src/main/java/com/wuman/oauth/samples/twitter/TwitterActivity.java#L206">Decoratorパターン用意してアダプタとローダをセットで渡す</a>とスッキリかけて良いし再利用しやすそうだとか, 様々な知見が得られるし, アプリを作る上で必要な知見を効率よく学習できると思う.</p>

<h3>復習として作ったあとに情報整理</h3>

<p>作りたいものがある程度作れたら, 使ったクラスを詳しく調べなおしたり, Mixiのテキストで使った箇所を詳しく読んでみたり, 冗長になってしまった箇所をリファクタリングしてみたりすると, やったことを深く理解できると思うし忘れにくい知識が身につくと思う.</p>

<h2>まとめ</h2>

<p>ざっくり, Androidエンジニアになって1週間の僕の実践している学習法について書いてみた. まとめると, Githubとかで先人の知恵を得ることと, 必要になったクラスとか機能を学ぶことで, 効率的に実践的なコーディングができるんではということを長々と書いた.</p>

<p>冒頭にも書いたけどもっと良いやり方があるとか, これはおかしいと思うことがアレば, コメントとか<a href="https://twitter.com/yucchiy_">@yucchiy_</a>へどうぞ.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chrome Extension generatorを使ってChrome Extensionを開発する]]></title>
    <link href="http://blog.yucchiy.com/2014/08/11/chrome-extension-yaoman/"/>
    <updated>2014-08-11T08:59:50+09:00</updated>
    <id>http://blog.yucchiy.com/2014/08/11/chrome-extension-yaoman</id>
    <content type="html"><![CDATA[<p>Chrome Extensionの開発について今っぽくgruntとかbowerとか使って開発しようと思って調べていたら,
Yeomanに<a href="https://github.com/yeoman/generator-chrome-extension">generator-chrome-extension</a>というgeneratorがあって, これを使うとサクッとChrome Extension
のテンプレートが作れたので, メモ代わりにブログに書いてみた.</p>

<h2>インストール</h2>

<p>インストールする前に, 当然yeomanが必要なので, yeomanをインストールする. node.js, npmがインストールされていれば
以下のコマンドでyeomanをインストールする.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g yo mocha</span></code></pre></td></tr></table></div></figure>

<p><code>generator-chrome-extension</code>では, デフォルトのテストフレームワークとして<code>mocha</code>を採用しているので, ついでにインストールしておくと良い.
次に, <code>generator-chrome-extension</code>をインストールする. インストールは至って簡単で, 以下のコマンドでインストールする.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g generator-chrome-extension</span></code></pre></td></tr></table></div></figure>

<h2>使い方</h2>

<p>まず, アプリのひな形を作成する. yeomanのコマンドを用いて作成する.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir path-to-my-chrome-extension
</span><span class='line'>cd  path-to-my-chrome-extension
</span><span class='line'>yo chrome-extension</span></code></pre></td></tr></table></div></figure>

<p>この時, アプリ名や初期アプリの構成を聞かれるので, 必要に応じてチェックをいれる.</p>

<h3>ディレクトリ構成</h3>

<p>ひな形作成時にすべてのチェックを外すと, 概ね以下のディレクトリ構成となる.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.
</span><span class='line'>├── Gruntfile.js
</span><span class='line'>├── app
</span><span class='line'>│   ├── _locales
</span><span class='line'>│   │   └── en
</span><span class='line'>│   │       └── messages.json
</span><span class='line'>│   ├── bower_components
</span><span class='line'>│   ├── images
</span><span class='line'>│   │   ├── icon-128.png
</span><span class='line'>│   │   ├── icon-16.png
</span><span class='line'>│   │   ├── icon-19.png
</span><span class='line'>│   │   └── icon-38.png
</span><span class='line'>│   ├── manifest.json
</span><span class='line'>│   ├── popup.html
</span><span class='line'>│   ├── scripts
</span><span class='line'>│   │   ├── background.coffee
</span><span class='line'>│   │   ├── background.js
</span><span class='line'>│   │   ├── chromereload.coffee
</span><span class='line'>│   │   ├── chromereload.js
</span><span class='line'>│   │   ├── popup.coffee
</span><span class='line'>│   │   └── popup.js
</span><span class='line'>│   └── styles
</span><span class='line'>│       └── main.scss
</span><span class='line'>├── bower.json
</span><span class='line'>├── dist
</span><span class='line'>│   ├── _locales
</span><span class='line'>│   │   └── en
</span><span class='line'>│   │       └── messages.json
</span><span class='line'>│   ├── images
</span><span class='line'>│   │   ├── icon-128.png
</span><span class='line'>│   │   ├── icon-16.png
</span><span class='line'>│   │   ├── icon-19.png
</span><span class='line'>│   │   └── icon-38.png
</span><span class='line'>│   ├── manifest.json
</span><span class='line'>│   ├── popup.html
</span><span class='line'>│   ├── scripts
</span><span class='line'>│   │   ├── background.js
</span><span class='line'>│   │   ├── popup.js
</span><span class='line'>│   │   └── vendor.js
</span><span class='line'>│   └── styles
</span><span class='line'>│       └── main.css
</span><span class='line'>├── package
</span><span class='line'>│   └── password generator-0.0.4.zip
</span><span class='line'>├─node_modules
</span><span class='line'>├── package.json
</span><span class='line'>└── test
</span><span class='line'>    ├── bower.json
</span><span class='line'>    ├── index.html
</span><span class='line'>    └── spec
</span><span class='line'>        └── test.js</span></code></pre></td></tr></table></div></figure>

<h3>Gruntタスク</h3>

<p>ひな形作成時に, 様々なタスクが追加されているが, 主に開発で利用するタスクを紹介する.</p>

<h4>debug</h4>

<p>debugタスクは<code>grunt-contrib-watch</code>を用いて, 各ファイルの変更を監視し,
bowerでインストールした外部ライブラリの自動ロード, SassやCoffeeScriptのコンパイル,
エクステンションのリロードまで自動で行ってくれる.
開発中はずっと起動しっぱなしになると思う.</p>

<p>また, <code>http://localhost:4000</code>に<code>/app</code>ディレクトリの内容を配信するローカルのサーバーが立ち上がるため,
そちらでデバッグすることもできる. (もちろんlivereloadも行ってくれる)</p>

<h4>build</h4>

<p>buildタスクは<code>/app</code>ディレクトリから, エクステンションをリリースするときに必要なzipの生成を行うタスク.
この時, 各種ファイルのコンパイルやjs・cssの結合と圧縮など, 静的ファイルの最適化は自動で行ってくれる.</p>

<p>生成されたzipファイルは<code>/package</code>に, <code>{appname}-{version}.zip</code>という名前で保存される.
ちなみにバージョンは, その時の<code>manifest.json</code>のバージョンに, ビルドバージョンがインクリメントされたものとなる(同時に<code>manifest.json</code>も更新される).</p>

<p>zip圧縮前のアプリは<code>/dist</code>に保存されている. リリース前には, 念の為にこちらのディレクトリをエクステンションとして読み込んで動作確認をした方がいいかもしれない.</p>

<h2>Tips</h2>

<p>エクステンションを開発していて気づいたTipsを上げていく.</p>

<h3>外部ライブラリの読み込み</h3>

<p>外部ライブラリの読み込みは, <code>bower</code>を通じて行う. 例えば<a href="http://underscorejs.org/">underscore.js</a>を利用したい場合は以下のようにする.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>bower install --save underscore</span></code></pre></td></tr></table></div></figure>

<p>すると<code>/app</code>ディレクトリにライブラリがインストールされ, 同時にライブラリを自動でロードされる.
具体的には, <code>bower install</code>後に, <code>/app</code>ディレクトリ直下にあるHTMLファイルの, <code>&lt;!-- bower:css --&gt; &lt;!-- endbower --&gt;</code>, または<code>&lt;!-- bower:js --&gt; &lt;!-- endbower --&gt;</code>と記述された場所に追記が行われる.
なので自分でHTMLファイルを追加する際には, <code>&lt;!-- bower:css --&gt;</code>と<code>&lt;!-- bower:js --&gt;</code>を適切な箇所に記述しておく必要がある.
だいたいyeomanが作ったHTMLファイルを参考に(というかコピペ)すれば良い.</p>

<p>ちなみにこれは<code>grunt-bower-install</code>を用いてgruntが処理を行っている.</p>

<h3>HTMLファイルの手動追加</h3>

<p>HTMLファイルを<code>/app</code>内に作成したら, <code>Gruntfile.js</code>の<code>userminPrepare</code>タスクの<code>html</code>の配列に, 作成したHTMLファイルを追記しておく.
こうしないと, <code>/dist</code>ディレクトリにコピーが行われなく, パッケージ時にこまる.</p>

<h3>Chromeに読み込んだエクステンションのデバッグ</h3>

<p>Chromeに読み込んだエクステンションのコンソールは, 設定画面の<code>Extensions &gt; デバッグしたいエクステンション &gt; Inspect views</code>から確認できる.</p>

<h2>参考リンク</h2>

<ul>
<li><a href="https://developer.chrome.com/devtools/docs/integrating">DevTools Extensions API</a></li>
<li><a href="http://kazu69.net/blog/tec/1969">YeomanをつかったChrome extension開発のメモ</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hubot+Herokuでbot入門+Slack連携]]></title>
    <link href="http://blog.yucchiy.com/2014/07/17/tutorial-hubot-slack-heroku/"/>
    <updated>2014-07-17T22:49:05+09:00</updated>
    <id>http://blog.yucchiy.com/2014/07/17/tutorial-hubot-slack-heroku</id>
    <content type="html"><![CDATA[<p>業務関係で少しHubotを触ったので, 備忘録代わりにブログに書いてみた.</p>

<h2>インストール</h2>

<p>以下の環境が必要になるので予めインストールする.</p>

<ul>
<li>Node.js, npm</li>
<li>CoffeeScript</li>
<li>Redis(データ永続化に必要. 必要に応じてインストールする)</li>
</ul>

<p>Macの場合は, HomeBrewでインストールするのが楽.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brew install node redis-server</span></code></pre></td></tr></table></div></figure>

<p><code>Hubot</code>は, npmからインストールできる.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install -g coffee-script hubot</span></code></pre></td></tr></table></div></figure>

<h2>Botを作成してみる</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>hubot --create mybot
</span><span class='line'>cd mybot
</span><span class='line'>npm install --save</span></code></pre></td></tr></table></div></figure>

<h3>Gitでバージョン管理</h3>

<p>はじめから<code>.gitignore</code>が用意されているので, おもむろにInitial commit.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd mybot
</span><span class='line'>git init
</span><span class='line'>git add .
</span><span class='line'>git commit -m "Initial commit."</span></code></pre></td></tr></table></div></figure>

<h3>動作確認</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./bin/hubot
</span><span class='line'>Hubot&gt; hubot hi
</span><span class='line'>Hubot&gt; hi
</span><span class='line'>Hubot&gt; exit</span></code></pre></td></tr></table></div></figure>

<h2>自作スクリプトを書く</h2>

<p><code>scripts</code>ディレクトリ以下にスクリプトを設置する.</p>

<h3>特定の文字列に反応してつぶやく</h3>

<p><code>robot.hear</code>を用いる. 第1引数に正規表現を, 第2引数に行いたい処理を関数で渡す.
この時関数に, <code>msg</code>オブジェクトが渡ってくるので, <code>msg.send</code>でBotを喋らせることができる.</p>

<p>以下, <code>hoge</code>とつぶやいたら<code>piyo</code>とつぶやくBotの例.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nv">util = </span><span class="nx">require</span> <span class="s">&#39;util&#39;</span><span class="err">↲</span>
</span><span class='line'><span class="err">↲</span>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span><span class="err">↲</span>
</span><span class='line'>  <span class="nx">robot</span><span class="p">.</span><span class="nx">hear</span> <span class="sr">/hoge/i</span><span class="p">,</span> <span class="nf">(msg) -&gt;</span><span class="err">↲</span>
</span><span class='line'>    <span class="nx">msg</span><span class="p">.</span><span class="nx">send</span> <span class="s">&#39;piyo&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<h3>特定の時間につぶやく(Cron)</h3>

<p>node-cronモジュールを用いると, 簡単に定期実行処理をHubotに行わせることができる.
node-cronはnpmからインストールできる.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">npm</span> <span class="nx">install</span> <span class="nx">cron</span> <span class="o">--</span><span class="nx">save</span>
</span></code></pre></td></tr></table></div></figure>

<p>以下, 日本時間の8時に, <code>おはよう朝だYo</code>とつぶやくスクリプト例.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nv">cron = </span><span class="nx">require</span><span class="p">(</span><span class="s">&#39;cron&#39;</span><span class="p">).</span><span class="nx">CronJob</span>
</span><span class='line'><span class="nv">module.exports = </span><span class="nf">(robot) -&gt;</span>
</span><span class='line'>  <span class="k">new</span> <span class="nx">cron</span><span class="p">(</span><span class="s">&#39;0 0 8 * * *&#39;</span><span class="p">,</span> <span class="nf">() -&gt;</span>
</span><span class='line'>    <span class="nx">robot</span><span class="p">.</span><span class="nx">messageRoom</span> <span class="s">&quot;#general&quot;</span><span class="p">,</span> <span class="s">&quot;おはよう朝だYo&quot;</span>
</span><span class='line'>  <span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="kc">true</span><span class="p">,</span> <span class="s">&#39;Asia/Tokyo&#39;</span><span class="p">).</span><span class="nx">start</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

<h3>環境変数の受け取り方</h3>

<p><code>process.env</code>を使う</p>

<h2>BotをHerokuで運用する</h2>

<p>Hubotは普通, そこまでサーバーのスペックを要求しないので(?)運用するには
Herokuが気軽で良いと判断し, Herokuをホスティングサーバーとしてみた.</p>

<p>まずHerokuを利用するの必要なツールをbrewインストールする.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">brew</span> <span class="nx">install</span> <span class="nx">heroku</span><span class="o">-</span><span class="nx">toolbelt</span>
</span></code></pre></td></tr></table></div></figure>

<h4>HerokuにHubotをデプロイ</h4>

<p><code>git push</code>でデプロイを行う.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">heroku</span> <span class="nx">create</span> <span class="o">--</span><span class="nx">stack</span> <span class="nx">cedar</span>
</span><span class='line'><span class="nx">git</span> <span class="nx">push</span> <span class="nx">heroku</span> <span class="nx">master</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">addons</span><span class="o">:</span><span class="nx">add</span> <span class="nx">rediscloud</span> <span class="c1"># Heroku上でVerifyしていないとエラー</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">ps</span><span class="o">:</span><span class="nx">scale</span> <span class="nx">web</span><span class="o">=</span><span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>

<h4>Herokuで運用してるHubotとSlackを連携</h4>

<p>まず, SlackのIntegrationsからHubot連携して, <code>HUBOT_SLACK_TOKEN</code>を控えておく.
次に, herokuコマンドで設定.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nx">heroku</span> <span class="nx">config</span><span class="o">:</span><span class="nx">add</span> <span class="nx">HUBOT_SLACK_TOKEN</span><span class="o">=</span><span class="nx">xxxx</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">config</span><span class="o">:</span><span class="nx">add</span> <span class="nx">HUBOT_SLACK_TEAM</span><span class="o">=</span><span class="nx">yucchiy</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">config</span><span class="o">:</span><span class="nx">add</span> <span class="nx">HUBOT_SLACK_BOTNAME</span><span class="o">=</span><span class="nx">yucchiy</span><span class="o">-</span><span class="nx">bot</span>
</span><span class='line'><span class="nx">heroku</span> <span class="nx">config</span><span class="o">:</span><span class="nx">add</span> <span class="nx">HEROKU_URL</span><span class="o">=</span><span class="nx">http</span><span class="o">:/</span><span class="sr">/yucchiy.herokuapp.com/</span>
</span></code></pre></td></tr></table></div></figure>

<p>他にも, 監視チャンネルを制御する設定もある.</p>

<ul>
<li><code>HUBOT_SLACK_CHANNELMODE</code>

<ul>
<li>後述する, <code>HUBOT_SLACK_CHANNELS</code>と併用する. <code>whitelist</code>と<code>blacklist</code>が選択できる.</li>
</ul></li>
<li><code>HUBOT_SLACK_CHANNELMODE</code>

<ul>
<li>カンマ区切りでチャンネル名を指定する.</li>
<li><code>HUBOT_SLACK_CHANNELS</code>に<code>whiltelist</code>と指定すると, 指定したチャンネルのみを監視し, <code>blacklist</code>を指定すると, 指定したチャンネルは監視しないようになる</li>
</ul></li>
</ul>

<p>詳細は<a href="https://github.com/tinyspeck/hubot-slack">https://github.com/tinyspeck/hubot-slack</a>より確認できる.</p>

<p>次に, <code>Procfile</code>をslackのアダプタをロードするように変更する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffee'><span class='line'><span class="nv">web: </span><span class="nx">bin</span><span class="o">/</span><span class="nx">hubot</span> <span class="o">--</span><span class="nx">adapter</span> <span class="nx">slack</span>
</span></code></pre></td></tr></table></div></figure>

<p>上記を設定の上, herokuのmasterブランチにデプロイすることで, slack連携が行われるようになる.</p>

<h2>参考URL</h2>

<ul>
<li><a href="http://hilott.hateblo.jp/entry/2012/07/09/004115">node.jsで環境変数を受け取る。herokuでの設定方法。</a></li>
<li><a href="http://sojiro14.github.io/blog/2014/04/19/irc-bot-by-hubot/">Hubotを使ったirc-bot作成メモ</a></li>
<li><a href="http://d.hatena.ne.jp/anatoo/20120204/1328368042">github社製ボットフレームワーク、hubotをIRCボットとして導入した話(修正あり</a></li>
<li><a href="http://nanapi.co.jp/blog/2014/06/04/slack_with_hubot/">Slack上のボットをHubotで作ってHerokuにデプロイしてみた</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Railsでそこそこ真面目にSEO対策する]]></title>
    <link href="http://blog.yucchiy.com/2014/06/28/rails-seo/"/>
    <updated>2014-06-28T19:07:49+09:00</updated>
    <id>http://blog.yucchiy.com/2014/06/28/rails-seo</id>
    <content type="html"><![CDATA[<p>個人でRailsで開発しているサービスのSEOを少しまじめに調べたので,
ブログにもアウトプットしてみた. 基本, 有名そうなGemを拾って対応した.</p>

<!-- more -->

<h2>MetaTags</h2>

<p><a href="https://github.com/kpumuk/meta-tags">https://github.com/kpumuk/meta-tags</a></p>

<p>SEOに重要そうなメタタグの管理を行ってくれるgem. 基本的なメタタグ以外に,
OpenGraph, Twitter Cards, などのタグもサポートしてくれている.
もちろん独自のメタタグも導入できる.</p>

<p>基本的にREADMEに書かれているメタタグを仕込んでおけば大丈夫そう.</p>

<h3>使い方</h3>

<p>Bundleでインストールを行う. Gemfileに以下を記述する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;meta-tags&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>次に, メタタグを仕込みたいビューファイルに以下を記述する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">display_meta_tags</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

<p><code>display_meta_tags</code>には引数が渡せて, デフォルトで埋め込むメタタグを設定できる.
ただし, <code>set_meta_tags</code>で設定するとそのメタタグは上書きされる.</p>

<p>例えば, <code>:site</code>などは全ページで共通のものを利用することが多いはずなので,
以下の様に設定しておくと毎回設定しなくて良くて便利.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%=</span> <span class="n">display_meta_tags</span><span class="p">({</span>
</span><span class='line'>  <span class="ss">:site</span> <span class="o">=&gt;</span> <span class="s1">&#39;HogePiyoSite&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="ss">:reverse</span> <span class="o">=&gt;</span> <span class="kp">true</span><span class="p">,</span>
</span><span class='line'><span class="p">})</span>
</span><span class='line'><span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

<p>メタタグを設定するには<code>set_meta_tags</code>をコントローラ内またはビューファイルで利用する.
例えばビューファイル内で設定するには以下のようにする.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="cp">&lt;%</span> <span class="n">set_meta_tags</span> <span class="ss">:title</span> <span class="o">=&gt;</span> <span class="s1">&#39;HogePiyoTitle&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

<h3>設定しておくと良さそうなメタタグ</h3>

<p>この辺は, テストでちゃんと設定されているかチェックしておけば
リリース直前で慌てるなんてことがなくなっていいかもしれない.</p>

<ul>
<li>基本的なメタタグ

<ul>
<li>title (<code>:title</code>)</li>
<li>description (<code>:description</code>)</li>
<li>keywords (<code>:keywords</code>)</li>
<li>Canonical URL (<code>:canonical</code>)</li>
</ul></li>
<li>Open Graph (<code>:og</code>)</li>
<li>Twiter Cards (<code>:twitter</code>)</li>
<li>Google Plus (Author Rank)

<ul>
<li>Author links (<code>:author</code>)</li>
<li>Publisher links (<code>:publisher</code>)</li>
</ul></li>
<li>必要に応じて

<ul>
<li>Pagination links (<code>:prev</code>, <code>:next</code>)</li>
<li>Noindex, Nofollow</li>
</ul></li>
</ul>

<h2>SitemapGenerator</h2>

<p><a href="https://github.com/kjvarga/sitemap_generator">https://github.com/kjvarga/sitemap_generator</a></p>

<p>サイトマップを簡単に作るためのgem. 地味にめんどくさいサイトマップのインデックスの作成や,
各検索エンジンにPing送信, 検索エンジン別にサイトマップを変更したりして便利.</p>

<h3>インストール</h3>

<p>MetaTagsと同様Bundleでインストールを行う.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;sitemap_generator&#39;</span>
</span></code></pre></td></tr></table></div></figure>

<p>次に, <code>config/sitemap.rb</code>を作成する. 以下のコマンドを実行する.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">bundle</span> <span class="nb">exec</span> <span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>

<h3>使い方</h3>

<p><code>config/sitemap.rb</code>以下に追加したいURLを<code>add</code>メソッドで行う.</p>

<figure class='code'><figcaption><span>config/sitemap.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">create</span> <span class="k">do</span>
</span><span class='line'>  <span class="no">Article</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">article</span><span class="o">|</span>
</span><span class='line'>    <span class="n">add</span> <span class="n">article_show_path</span><span class="p">(</span><span class="n">article</span><span class="p">),</span> <span class="ss">:priority</span> <span class="o">=&gt;</span> <span class="mi">0</span><span class="o">.</span><span class="mi">7</span><span class="p">,</span> <span class="ss">:changefreq</span> <span class="o">=&gt;</span> <span class="s1">&#39;weekly&#39;</span><span class="p">,</span> <span class="ss">:astmod</span> <span class="o">=&gt;</span> <span class="n">article</span><span class="o">.</span><span class="n">updated_at</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

<p>また, いろんな設定ができる.</p>

<p>詳細は<a href="https://github.com/kjvarga/sitemap_generator#sitemap-configuration">https://github.com/kjvarga/sitemap_generator#sitemap-configuration</a>のSitemap Optionsより確認できる.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># ホストを設定する</span>
</span><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">default_host</span> <span class="o">=</span> <span class="s2">&quot;http://example.com&quot;</span>
</span><span class='line'><span class="c1"># サイトマップを配置するディレクトリを設定する</span>
</span><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">sitemaps_path</span> <span class="o">=</span> <span class="s1">&#39;sitemaps/&#39;</span>
</span><span class='line'><span class="c1"># インデックスサイトマップを作成するかどうか設定する</span>
</span><span class='line'><span class="no">SitemapGenerator</span><span class="o">::</span><span class="no">Sitemap</span><span class="o">.</span><span class="n">create_index</span> <span class="o">=</span> <span class="ss">:auto</span>
</span></code></pre></td></tr></table></div></figure>

<p>サイトマップの生成は, Rakeコマンドより行う.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="n">clean</span>                      <span class="c1"># サイトマップを削除する</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="n">create</span>                     <span class="c1"># サイトマップを作成する(検索エンジンにpingを送らない)</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="n">refresh</span>                    <span class="c1"># サイトマップを作成し, 検索エンジンにpingを送る</span>
</span><span class='line'><span class="n">rake</span> <span class="ss">sitemap</span><span class="p">:</span><span class="ss">refresh</span><span class="p">:</span><span class="n">no_ping</span>            <span class="c1"># サイトマップを作成する(検索エンジンにpingを送らない, たぶんsitemap:createと一緒?)</span>
</span></code></pre></td></tr></table></div></figure>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello Octpress]]></title>
    <link href="http://blog.yucchiy.com/2014/06/23/hello-octopress/"/>
    <updated>2014-06-23T01:39:12+09:00</updated>
    <id>http://blog.yucchiy.com/2014/06/23/hello-octopress</id>
    <content type="html"><![CDATA[<p>なんとなくOctopressに引っ越ししてみた. これからはこちらでブログを書く.</p>
]]></content>
  </entry>
  
</feed>
